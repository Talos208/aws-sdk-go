// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package ec2_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/service/ec2"
)

var _ time.Duration
var _ bytes.Buffer

func ExampleEC2_AcceptVPCPeeringConnection() {
	svc := ec2.New(nil)

	params := &ec2.AcceptVPCPeeringConnectionInput{
		DryRun:                 aws.BoolPtr(true),
		VPCPeeringConnectionID: aws.StringPtr("String"),
	}
	resp, err := svc.AcceptVPCPeeringConnection(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AllocateAddress() {
	svc := ec2.New(nil)

	params := &ec2.AllocateAddressInput{
		Domain: aws.StringPtr("DomainType"),
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.AllocateAddress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AssignPrivateIPAddresses() {
	svc := ec2.New(nil)

	params := &ec2.AssignPrivateIPAddressesInput{
		NetworkInterfaceID: aws.StringPtr("String"), // Required
		AllowReassignment:  aws.BoolPtr(true),
		PrivateIPAddresses: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SecondaryPrivateIPAddressCount: aws.Int64Ptr(1),
	}
	resp, err := svc.AssignPrivateIPAddresses(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AssociateAddress() {
	svc := ec2.New(nil)

	params := &ec2.AssociateAddressInput{
		AllocationID:       aws.StringPtr("String"),
		AllowReassociation: aws.BoolPtr(true),
		DryRun:             aws.BoolPtr(true),
		InstanceID:         aws.StringPtr("String"),
		NetworkInterfaceID: aws.StringPtr("String"),
		PrivateIPAddress:   aws.StringPtr("String"),
		PublicIP:           aws.StringPtr("String"),
	}
	resp, err := svc.AssociateAddress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AssociateDHCPOptions() {
	svc := ec2.New(nil)

	params := &ec2.AssociateDHCPOptionsInput{
		DHCPOptionsID: aws.StringPtr("String"), // Required
		VPCID:         aws.StringPtr("String"), // Required
		DryRun:        aws.BoolPtr(true),
	}
	resp, err := svc.AssociateDHCPOptions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AssociateRouteTable() {
	svc := ec2.New(nil)

	params := &ec2.AssociateRouteTableInput{
		RouteTableID: aws.StringPtr("String"), // Required
		SubnetID:     aws.StringPtr("String"), // Required
		DryRun:       aws.BoolPtr(true),
	}
	resp, err := svc.AssociateRouteTable(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AttachClassicLinkVPC() {
	svc := ec2.New(nil)

	params := &ec2.AttachClassicLinkVPCInput{
		Groups: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		InstanceID: aws.StringPtr("String"), // Required
		VPCID:      aws.StringPtr("String"), // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.AttachClassicLinkVPC(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AttachInternetGateway() {
	svc := ec2.New(nil)

	params := &ec2.AttachInternetGatewayInput{
		InternetGatewayID: aws.StringPtr("String"), // Required
		VPCID:             aws.StringPtr("String"), // Required
		DryRun:            aws.BoolPtr(true),
	}
	resp, err := svc.AttachInternetGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AttachNetworkInterface() {
	svc := ec2.New(nil)

	params := &ec2.AttachNetworkInterfaceInput{
		DeviceIndex:        aws.Int64Ptr(1),         // Required
		InstanceID:         aws.StringPtr("String"), // Required
		NetworkInterfaceID: aws.StringPtr("String"), // Required
		DryRun:             aws.BoolPtr(true),
	}
	resp, err := svc.AttachNetworkInterface(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AttachVPNGateway() {
	svc := ec2.New(nil)

	params := &ec2.AttachVPNGatewayInput{
		VPCID:        aws.StringPtr("String"), // Required
		VPNGatewayID: aws.StringPtr("String"), // Required
		DryRun:       aws.BoolPtr(true),
	}
	resp, err := svc.AttachVPNGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AttachVolume() {
	svc := ec2.New(nil)

	params := &ec2.AttachVolumeInput{
		Device:     aws.StringPtr("String"), // Required
		InstanceID: aws.StringPtr("String"), // Required
		VolumeID:   aws.StringPtr("String"), // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.AttachVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AuthorizeSecurityGroupEgress() {
	svc := ec2.New(nil)

	params := &ec2.AuthorizeSecurityGroupEgressInput{
		GroupID:  aws.StringPtr("String"), // Required
		CIDRIP:   aws.StringPtr("String"),
		DryRun:   aws.BoolPtr(true),
		FromPort: aws.Int64Ptr(1),
		IPPermissions: []*ec2.IPPermission{
			{ // Required
				FromPort:   aws.Int64Ptr(1),
				IPProtocol: aws.StringPtr("String"),
				IPRanges: []*ec2.IPRange{
					{ // Required
						CIDRIP: aws.StringPtr("String"),
					},
					// More values...
				},
				PrefixListIDs: []*ec2.PrefixListID{
					{ // Required
						PrefixListID: aws.StringPtr("String"),
					},
					// More values...
				},
				ToPort: aws.Int64Ptr(1),
				UserIDGroupPairs: []*ec2.UserIDGroupPair{
					{ // Required
						GroupID:   aws.StringPtr("String"),
						GroupName: aws.StringPtr("String"),
						UserID:    aws.StringPtr("String"),
					},
					// More values...
				},
			},
			// More values...
		},
		IPProtocol:                 aws.StringPtr("String"),
		SourceSecurityGroupName:    aws.StringPtr("String"),
		SourceSecurityGroupOwnerID: aws.StringPtr("String"),
		ToPort: aws.Int64Ptr(1),
	}
	resp, err := svc.AuthorizeSecurityGroupEgress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_AuthorizeSecurityGroupIngress() {
	svc := ec2.New(nil)

	params := &ec2.AuthorizeSecurityGroupIngressInput{
		CIDRIP:    aws.StringPtr("String"),
		DryRun:    aws.BoolPtr(true),
		FromPort:  aws.Int64Ptr(1),
		GroupID:   aws.StringPtr("String"),
		GroupName: aws.StringPtr("String"),
		IPPermissions: []*ec2.IPPermission{
			{ // Required
				FromPort:   aws.Int64Ptr(1),
				IPProtocol: aws.StringPtr("String"),
				IPRanges: []*ec2.IPRange{
					{ // Required
						CIDRIP: aws.StringPtr("String"),
					},
					// More values...
				},
				PrefixListIDs: []*ec2.PrefixListID{
					{ // Required
						PrefixListID: aws.StringPtr("String"),
					},
					// More values...
				},
				ToPort: aws.Int64Ptr(1),
				UserIDGroupPairs: []*ec2.UserIDGroupPair{
					{ // Required
						GroupID:   aws.StringPtr("String"),
						GroupName: aws.StringPtr("String"),
						UserID:    aws.StringPtr("String"),
					},
					// More values...
				},
			},
			// More values...
		},
		IPProtocol:                 aws.StringPtr("String"),
		SourceSecurityGroupName:    aws.StringPtr("String"),
		SourceSecurityGroupOwnerID: aws.StringPtr("String"),
		ToPort: aws.Int64Ptr(1),
	}
	resp, err := svc.AuthorizeSecurityGroupIngress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_BundleInstance() {
	svc := ec2.New(nil)

	params := &ec2.BundleInstanceInput{
		InstanceID: aws.StringPtr("String"), // Required
		Storage: &ec2.Storage{ // Required
			S3: &ec2.S3Storage{
				AWSAccessKeyID:        aws.StringPtr("String"),
				Bucket:                aws.StringPtr("String"),
				Prefix:                aws.StringPtr("String"),
				UploadPolicy:          []byte("PAYLOAD"),
				UploadPolicySignature: aws.StringPtr("String"),
			},
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.BundleInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CancelBundleTask() {
	svc := ec2.New(nil)

	params := &ec2.CancelBundleTaskInput{
		BundleID: aws.StringPtr("String"), // Required
		DryRun:   aws.BoolPtr(true),
	}
	resp, err := svc.CancelBundleTask(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CancelConversionTask() {
	svc := ec2.New(nil)

	params := &ec2.CancelConversionTaskInput{
		ConversionTaskID: aws.StringPtr("String"), // Required
		DryRun:           aws.BoolPtr(true),
		ReasonMessage:    aws.StringPtr("String"),
	}
	resp, err := svc.CancelConversionTask(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CancelExportTask() {
	svc := ec2.New(nil)

	params := &ec2.CancelExportTaskInput{
		ExportTaskID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.CancelExportTask(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CancelImportTask() {
	svc := ec2.New(nil)

	params := &ec2.CancelImportTaskInput{
		CancelReason: aws.StringPtr("String"),
		DryRun:       aws.BoolPtr(true),
		ImportTaskID: aws.StringPtr("String"),
	}
	resp, err := svc.CancelImportTask(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CancelReservedInstancesListing() {
	svc := ec2.New(nil)

	params := &ec2.CancelReservedInstancesListingInput{
		ReservedInstancesListingID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.CancelReservedInstancesListing(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CancelSpotFleetRequests() {
	svc := ec2.New(nil)

	params := &ec2.CancelSpotFleetRequestsInput{
		SpotFleetRequestIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		TerminateInstances: aws.BoolPtr(true), // Required
		DryRun:             aws.BoolPtr(true),
	}
	resp, err := svc.CancelSpotFleetRequests(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CancelSpotInstanceRequests() {
	svc := ec2.New(nil)

	params := &ec2.CancelSpotInstanceRequestsInput{
		SpotInstanceRequestIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.CancelSpotInstanceRequests(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ConfirmProductInstance() {
	svc := ec2.New(nil)

	params := &ec2.ConfirmProductInstanceInput{
		InstanceID:  aws.StringPtr("String"), // Required
		ProductCode: aws.StringPtr("String"), // Required
		DryRun:      aws.BoolPtr(true),
	}
	resp, err := svc.ConfirmProductInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CopyImage() {
	svc := ec2.New(nil)

	params := &ec2.CopyImageInput{
		Name:          aws.StringPtr("String"), // Required
		SourceImageID: aws.StringPtr("String"), // Required
		SourceRegion:  aws.StringPtr("String"), // Required
		ClientToken:   aws.StringPtr("String"),
		Description:   aws.StringPtr("String"),
		DryRun:        aws.BoolPtr(true),
	}
	resp, err := svc.CopyImage(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CopySnapshot() {
	svc := ec2.New(nil)

	params := &ec2.CopySnapshotInput{
		SourceRegion:      aws.StringPtr("String"), // Required
		SourceSnapshotID:  aws.StringPtr("String"), // Required
		Description:       aws.StringPtr("String"),
		DestinationRegion: aws.StringPtr("String"),
		DryRun:            aws.BoolPtr(true),
		PresignedURL:      aws.StringPtr("String"),
	}
	resp, err := svc.CopySnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateCustomerGateway() {
	svc := ec2.New(nil)

	params := &ec2.CreateCustomerGatewayInput{
		BGPASN:   aws.Int64Ptr(1),              // Required
		PublicIP: aws.StringPtr("String"),      // Required
		Type:     aws.StringPtr("GatewayType"), // Required
		DryRun:   aws.BoolPtr(true),
	}
	resp, err := svc.CreateCustomerGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateDHCPOptions() {
	svc := ec2.New(nil)

	params := &ec2.CreateDHCPOptionsInput{
		DHCPConfigurations: []*ec2.NewDHCPConfiguration{ // Required
			{ // Required
				Key: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.CreateDHCPOptions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateFlowLogs() {
	svc := ec2.New(nil)

	params := &ec2.CreateFlowLogsInput{
		DeliverLogsPermissionARN: aws.StringPtr("String"), // Required
		LogGroupName:             aws.StringPtr("String"), // Required
		ResourceIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		ResourceType: aws.StringPtr("FlowLogsResourceType"), // Required
		TrafficType:  aws.StringPtr("TrafficType"),          // Required
		ClientToken:  aws.StringPtr("String"),
	}
	resp, err := svc.CreateFlowLogs(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateImage() {
	svc := ec2.New(nil)

	params := &ec2.CreateImageInput{
		InstanceID: aws.StringPtr("String"), // Required
		Name:       aws.StringPtr("String"), // Required
		BlockDeviceMappings: []*ec2.BlockDeviceMapping{
			{ // Required
				DeviceName: aws.StringPtr("String"),
				EBS: &ec2.EBSBlockDevice{
					DeleteOnTermination: aws.BoolPtr(true),
					Encrypted:           aws.BoolPtr(true),
					IOPS:                aws.Int64Ptr(1),
					SnapshotID:          aws.StringPtr("String"),
					VolumeSize:          aws.Int64Ptr(1),
					VolumeType:          aws.StringPtr("VolumeType"),
				},
				NoDevice:    aws.StringPtr("String"),
				VirtualName: aws.StringPtr("String"),
			},
			// More values...
		},
		Description: aws.StringPtr("String"),
		DryRun:      aws.BoolPtr(true),
		NoReboot:    aws.BoolPtr(true),
	}
	resp, err := svc.CreateImage(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateInstanceExportTask() {
	svc := ec2.New(nil)

	params := &ec2.CreateInstanceExportTaskInput{
		InstanceID:  aws.StringPtr("String"), // Required
		Description: aws.StringPtr("String"),
		ExportToS3Task: &ec2.ExportToS3TaskSpecification{
			ContainerFormat: aws.StringPtr("ContainerFormat"),
			DiskImageFormat: aws.StringPtr("DiskImageFormat"),
			S3Bucket:        aws.StringPtr("String"),
			S3Prefix:        aws.StringPtr("String"),
		},
		TargetEnvironment: aws.StringPtr("ExportEnvironment"),
	}
	resp, err := svc.CreateInstanceExportTask(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateInternetGateway() {
	svc := ec2.New(nil)

	params := &ec2.CreateInternetGatewayInput{
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.CreateInternetGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateKeyPair() {
	svc := ec2.New(nil)

	params := &ec2.CreateKeyPairInput{
		KeyName: aws.StringPtr("String"), // Required
		DryRun:  aws.BoolPtr(true),
	}
	resp, err := svc.CreateKeyPair(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateNetworkACL() {
	svc := ec2.New(nil)

	params := &ec2.CreateNetworkACLInput{
		VPCID:  aws.StringPtr("String"), // Required
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.CreateNetworkACL(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateNetworkACLEntry() {
	svc := ec2.New(nil)

	params := &ec2.CreateNetworkACLEntryInput{
		CIDRBlock:    aws.StringPtr("String"),     // Required
		Egress:       aws.BoolPtr(true),           // Required
		NetworkACLID: aws.StringPtr("String"),     // Required
		Protocol:     aws.StringPtr("String"),     // Required
		RuleAction:   aws.StringPtr("RuleAction"), // Required
		RuleNumber:   aws.Int64Ptr(1),             // Required
		DryRun:       aws.BoolPtr(true),
		ICMPTypeCode: &ec2.ICMPTypeCode{
			Code: aws.Int64Ptr(1),
			Type: aws.Int64Ptr(1),
		},
		PortRange: &ec2.PortRange{
			From: aws.Int64Ptr(1),
			To:   aws.Int64Ptr(1),
		},
	}
	resp, err := svc.CreateNetworkACLEntry(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateNetworkInterface() {
	svc := ec2.New(nil)

	params := &ec2.CreateNetworkInterfaceInput{
		SubnetID:    aws.StringPtr("String"), // Required
		Description: aws.StringPtr("String"),
		DryRun:      aws.BoolPtr(true),
		Groups: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		PrivateIPAddress: aws.StringPtr("String"),
		PrivateIPAddresses: []*ec2.PrivateIPAddressSpecification{
			{ // Required
				PrivateIPAddress: aws.StringPtr("String"), // Required
				Primary:          aws.BoolPtr(true),
			},
			// More values...
		},
		SecondaryPrivateIPAddressCount: aws.Int64Ptr(1),
	}
	resp, err := svc.CreateNetworkInterface(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreatePlacementGroup() {
	svc := ec2.New(nil)

	params := &ec2.CreatePlacementGroupInput{
		GroupName: aws.StringPtr("String"),            // Required
		Strategy:  aws.StringPtr("PlacementStrategy"), // Required
		DryRun:    aws.BoolPtr(true),
	}
	resp, err := svc.CreatePlacementGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateReservedInstancesListing() {
	svc := ec2.New(nil)

	params := &ec2.CreateReservedInstancesListingInput{
		ClientToken:   aws.StringPtr("String"), // Required
		InstanceCount: aws.Int64Ptr(1),         // Required
		PriceSchedules: []*ec2.PriceScheduleSpecification{ // Required
			{ // Required
				CurrencyCode: aws.StringPtr("CurrencyCodeValues"),
				Price:        aws.Float64Ptr(1.0),
				Term:         aws.Int64Ptr(1),
			},
			// More values...
		},
		ReservedInstancesID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.CreateReservedInstancesListing(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateRoute() {
	svc := ec2.New(nil)

	params := &ec2.CreateRouteInput{
		DestinationCIDRBlock:   aws.StringPtr("String"), // Required
		RouteTableID:           aws.StringPtr("String"), // Required
		ClientToken:            aws.StringPtr("String"),
		DryRun:                 aws.BoolPtr(true),
		GatewayID:              aws.StringPtr("String"),
		InstanceID:             aws.StringPtr("String"),
		NetworkInterfaceID:     aws.StringPtr("String"),
		VPCPeeringConnectionID: aws.StringPtr("String"),
	}
	resp, err := svc.CreateRoute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateRouteTable() {
	svc := ec2.New(nil)

	params := &ec2.CreateRouteTableInput{
		VPCID:  aws.StringPtr("String"), // Required
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.CreateRouteTable(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateSecurityGroup() {
	svc := ec2.New(nil)

	params := &ec2.CreateSecurityGroupInput{
		Description: aws.StringPtr("String"), // Required
		GroupName:   aws.StringPtr("String"), // Required
		DryRun:      aws.BoolPtr(true),
		VPCID:       aws.StringPtr("String"),
	}
	resp, err := svc.CreateSecurityGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateSnapshot() {
	svc := ec2.New(nil)

	params := &ec2.CreateSnapshotInput{
		VolumeID:    aws.StringPtr("String"), // Required
		Description: aws.StringPtr("String"),
		DryRun:      aws.BoolPtr(true),
	}
	resp, err := svc.CreateSnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateSpotDatafeedSubscription() {
	svc := ec2.New(nil)

	params := &ec2.CreateSpotDatafeedSubscriptionInput{
		Bucket: aws.StringPtr("String"), // Required
		DryRun: aws.BoolPtr(true),
		Prefix: aws.StringPtr("String"),
	}
	resp, err := svc.CreateSpotDatafeedSubscription(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateSubnet() {
	svc := ec2.New(nil)

	params := &ec2.CreateSubnetInput{
		CIDRBlock:        aws.StringPtr("String"), // Required
		VPCID:            aws.StringPtr("String"), // Required
		AvailabilityZone: aws.StringPtr("String"),
		DryRun:           aws.BoolPtr(true),
	}
	resp, err := svc.CreateSubnet(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateTags() {
	svc := ec2.New(nil)

	params := &ec2.CreateTagsInput{
		Resources: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		Tags: []*ec2.Tag{ // Required
			{ // Required
				Key:   aws.StringPtr("String"),
				Value: aws.StringPtr("String"),
			},
			// More values...
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.CreateTags(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateVPC() {
	svc := ec2.New(nil)

	params := &ec2.CreateVPCInput{
		CIDRBlock:       aws.StringPtr("String"), // Required
		DryRun:          aws.BoolPtr(true),
		InstanceTenancy: aws.StringPtr("Tenancy"),
	}
	resp, err := svc.CreateVPC(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateVPCEndpoint() {
	svc := ec2.New(nil)

	params := &ec2.CreateVPCEndpointInput{
		ServiceName:    aws.StringPtr("String"), // Required
		VPCID:          aws.StringPtr("String"), // Required
		ClientToken:    aws.StringPtr("String"),
		DryRun:         aws.BoolPtr(true),
		PolicyDocument: aws.StringPtr("String"),
		RouteTableIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.CreateVPCEndpoint(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateVPCPeeringConnection() {
	svc := ec2.New(nil)

	params := &ec2.CreateVPCPeeringConnectionInput{
		DryRun:      aws.BoolPtr(true),
		PeerOwnerID: aws.StringPtr("String"),
		PeerVPCID:   aws.StringPtr("String"),
		VPCID:       aws.StringPtr("String"),
	}
	resp, err := svc.CreateVPCPeeringConnection(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateVPNConnection() {
	svc := ec2.New(nil)

	params := &ec2.CreateVPNConnectionInput{
		CustomerGatewayID: aws.StringPtr("String"), // Required
		Type:              aws.StringPtr("String"), // Required
		VPNGatewayID:      aws.StringPtr("String"), // Required
		DryRun:            aws.BoolPtr(true),
		Options: &ec2.VPNConnectionOptionsSpecification{
			StaticRoutesOnly: aws.BoolPtr(true),
		},
	}
	resp, err := svc.CreateVPNConnection(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateVPNConnectionRoute() {
	svc := ec2.New(nil)

	params := &ec2.CreateVPNConnectionRouteInput{
		DestinationCIDRBlock: aws.StringPtr("String"), // Required
		VPNConnectionID:      aws.StringPtr("String"), // Required
	}
	resp, err := svc.CreateVPNConnectionRoute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateVPNGateway() {
	svc := ec2.New(nil)

	params := &ec2.CreateVPNGatewayInput{
		Type:             aws.StringPtr("GatewayType"), // Required
		AvailabilityZone: aws.StringPtr("String"),
		DryRun:           aws.BoolPtr(true),
	}
	resp, err := svc.CreateVPNGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_CreateVolume() {
	svc := ec2.New(nil)

	params := &ec2.CreateVolumeInput{
		AvailabilityZone: aws.StringPtr("String"), // Required
		DryRun:           aws.BoolPtr(true),
		Encrypted:        aws.BoolPtr(true),
		IOPS:             aws.Int64Ptr(1),
		KMSKeyID:         aws.StringPtr("String"),
		Size:             aws.Int64Ptr(1),
		SnapshotID:       aws.StringPtr("String"),
		VolumeType:       aws.StringPtr("VolumeType"),
	}
	resp, err := svc.CreateVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteCustomerGateway() {
	svc := ec2.New(nil)

	params := &ec2.DeleteCustomerGatewayInput{
		CustomerGatewayID: aws.StringPtr("String"), // Required
		DryRun:            aws.BoolPtr(true),
	}
	resp, err := svc.DeleteCustomerGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteDHCPOptions() {
	svc := ec2.New(nil)

	params := &ec2.DeleteDHCPOptionsInput{
		DHCPOptionsID: aws.StringPtr("String"), // Required
		DryRun:        aws.BoolPtr(true),
	}
	resp, err := svc.DeleteDHCPOptions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteFlowLogs() {
	svc := ec2.New(nil)

	params := &ec2.DeleteFlowLogsInput{
		FlowLogIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DeleteFlowLogs(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteInternetGateway() {
	svc := ec2.New(nil)

	params := &ec2.DeleteInternetGatewayInput{
		InternetGatewayID: aws.StringPtr("String"), // Required
		DryRun:            aws.BoolPtr(true),
	}
	resp, err := svc.DeleteInternetGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteKeyPair() {
	svc := ec2.New(nil)

	params := &ec2.DeleteKeyPairInput{
		KeyName: aws.StringPtr("String"), // Required
		DryRun:  aws.BoolPtr(true),
	}
	resp, err := svc.DeleteKeyPair(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteNetworkACL() {
	svc := ec2.New(nil)

	params := &ec2.DeleteNetworkACLInput{
		NetworkACLID: aws.StringPtr("String"), // Required
		DryRun:       aws.BoolPtr(true),
	}
	resp, err := svc.DeleteNetworkACL(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteNetworkACLEntry() {
	svc := ec2.New(nil)

	params := &ec2.DeleteNetworkACLEntryInput{
		Egress:       aws.BoolPtr(true),       // Required
		NetworkACLID: aws.StringPtr("String"), // Required
		RuleNumber:   aws.Int64Ptr(1),         // Required
		DryRun:       aws.BoolPtr(true),
	}
	resp, err := svc.DeleteNetworkACLEntry(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteNetworkInterface() {
	svc := ec2.New(nil)

	params := &ec2.DeleteNetworkInterfaceInput{
		NetworkInterfaceID: aws.StringPtr("String"), // Required
		DryRun:             aws.BoolPtr(true),
	}
	resp, err := svc.DeleteNetworkInterface(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeletePlacementGroup() {
	svc := ec2.New(nil)

	params := &ec2.DeletePlacementGroupInput{
		GroupName: aws.StringPtr("String"), // Required
		DryRun:    aws.BoolPtr(true),
	}
	resp, err := svc.DeletePlacementGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteRoute() {
	svc := ec2.New(nil)

	params := &ec2.DeleteRouteInput{
		DestinationCIDRBlock: aws.StringPtr("String"), // Required
		RouteTableID:         aws.StringPtr("String"), // Required
		DryRun:               aws.BoolPtr(true),
	}
	resp, err := svc.DeleteRoute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteRouteTable() {
	svc := ec2.New(nil)

	params := &ec2.DeleteRouteTableInput{
		RouteTableID: aws.StringPtr("String"), // Required
		DryRun:       aws.BoolPtr(true),
	}
	resp, err := svc.DeleteRouteTable(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteSecurityGroup() {
	svc := ec2.New(nil)

	params := &ec2.DeleteSecurityGroupInput{
		DryRun:    aws.BoolPtr(true),
		GroupID:   aws.StringPtr("String"),
		GroupName: aws.StringPtr("String"),
	}
	resp, err := svc.DeleteSecurityGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteSnapshot() {
	svc := ec2.New(nil)

	params := &ec2.DeleteSnapshotInput{
		SnapshotID: aws.StringPtr("String"), // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.DeleteSnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteSpotDatafeedSubscription() {
	svc := ec2.New(nil)

	params := &ec2.DeleteSpotDatafeedSubscriptionInput{
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.DeleteSpotDatafeedSubscription(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteSubnet() {
	svc := ec2.New(nil)

	params := &ec2.DeleteSubnetInput{
		SubnetID: aws.StringPtr("String"), // Required
		DryRun:   aws.BoolPtr(true),
	}
	resp, err := svc.DeleteSubnet(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteTags() {
	svc := ec2.New(nil)

	params := &ec2.DeleteTagsInput{
		Resources: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
		Tags: []*ec2.Tag{
			{ // Required
				Key:   aws.StringPtr("String"),
				Value: aws.StringPtr("String"),
			},
			// More values...
		},
	}
	resp, err := svc.DeleteTags(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteVPC() {
	svc := ec2.New(nil)

	params := &ec2.DeleteVPCInput{
		VPCID:  aws.StringPtr("String"), // Required
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.DeleteVPC(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteVPCEndpoints() {
	svc := ec2.New(nil)

	params := &ec2.DeleteVPCEndpointsInput{
		VPCEndpointIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.DeleteVPCEndpoints(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteVPCPeeringConnection() {
	svc := ec2.New(nil)

	params := &ec2.DeleteVPCPeeringConnectionInput{
		VPCPeeringConnectionID: aws.StringPtr("String"), // Required
		DryRun:                 aws.BoolPtr(true),
	}
	resp, err := svc.DeleteVPCPeeringConnection(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteVPNConnection() {
	svc := ec2.New(nil)

	params := &ec2.DeleteVPNConnectionInput{
		VPNConnectionID: aws.StringPtr("String"), // Required
		DryRun:          aws.BoolPtr(true),
	}
	resp, err := svc.DeleteVPNConnection(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteVPNConnectionRoute() {
	svc := ec2.New(nil)

	params := &ec2.DeleteVPNConnectionRouteInput{
		DestinationCIDRBlock: aws.StringPtr("String"), // Required
		VPNConnectionID:      aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeleteVPNConnectionRoute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteVPNGateway() {
	svc := ec2.New(nil)

	params := &ec2.DeleteVPNGatewayInput{
		VPNGatewayID: aws.StringPtr("String"), // Required
		DryRun:       aws.BoolPtr(true),
	}
	resp, err := svc.DeleteVPNGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeleteVolume() {
	svc := ec2.New(nil)

	params := &ec2.DeleteVolumeInput{
		VolumeID: aws.StringPtr("String"), // Required
		DryRun:   aws.BoolPtr(true),
	}
	resp, err := svc.DeleteVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DeregisterImage() {
	svc := ec2.New(nil)

	params := &ec2.DeregisterImageInput{
		ImageID: aws.StringPtr("String"), // Required
		DryRun:  aws.BoolPtr(true),
	}
	resp, err := svc.DeregisterImage(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeAccountAttributes() {
	svc := ec2.New(nil)

	params := &ec2.DescribeAccountAttributesInput{
		AttributeNames: []*string{
			aws.StringPtr("AccountAttributeName"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.DescribeAccountAttributes(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeAddresses() {
	svc := ec2.New(nil)

	params := &ec2.DescribeAddressesInput{
		AllocationIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		PublicIPs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeAddresses(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeAvailabilityZones() {
	svc := ec2.New(nil)

	params := &ec2.DescribeAvailabilityZonesInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		ZoneNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeAvailabilityZones(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeBundleTasks() {
	svc := ec2.New(nil)

	params := &ec2.DescribeBundleTasksInput{
		BundleIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
	}
	resp, err := svc.DescribeBundleTasks(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeClassicLinkInstances() {
	svc := ec2.New(nil)

	params := &ec2.DescribeClassicLinkInstancesInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		InstanceIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
	}
	resp, err := svc.DescribeClassicLinkInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeConversionTasks() {
	svc := ec2.New(nil)

	params := &ec2.DescribeConversionTasksInput{
		ConversionTaskIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
	}
	resp, err := svc.DescribeConversionTasks(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeCustomerGateways() {
	svc := ec2.New(nil)

	params := &ec2.DescribeCustomerGatewaysInput{
		CustomerGatewayIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
	}
	resp, err := svc.DescribeCustomerGateways(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeDHCPOptions() {
	svc := ec2.New(nil)

	params := &ec2.DescribeDHCPOptionsInput{
		DHCPOptionsIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
	}
	resp, err := svc.DescribeDHCPOptions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeExportTasks() {
	svc := ec2.New(nil)

	params := &ec2.DescribeExportTasksInput{
		ExportTaskIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeExportTasks(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeFlowLogs() {
	svc := ec2.New(nil)

	params := &ec2.DescribeFlowLogsInput{
		Filter: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		FlowLogIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
	}
	resp, err := svc.DescribeFlowLogs(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeImageAttribute() {
	svc := ec2.New(nil)

	params := &ec2.DescribeImageAttributeInput{
		Attribute: aws.StringPtr("ImageAttributeName"), // Required
		ImageID:   aws.StringPtr("String"),             // Required
		DryRun:    aws.BoolPtr(true),
	}
	resp, err := svc.DescribeImageAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeImages() {
	svc := ec2.New(nil)

	params := &ec2.DescribeImagesInput{
		DryRun: aws.BoolPtr(true),
		ExecutableUsers: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		ImageIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		Owners: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeImages(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeImportImageTasks() {
	svc := ec2.New(nil)

	params := &ec2.DescribeImportImageTasksInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		ImportTaskIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
	}
	resp, err := svc.DescribeImportImageTasks(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeImportSnapshotTasks() {
	svc := ec2.New(nil)

	params := &ec2.DescribeImportSnapshotTasksInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		ImportTaskIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
	}
	resp, err := svc.DescribeImportSnapshotTasks(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeInstanceAttribute() {
	svc := ec2.New(nil)

	params := &ec2.DescribeInstanceAttributeInput{
		Attribute:  aws.StringPtr("InstanceAttributeName"), // Required
		InstanceID: aws.StringPtr("String"),                // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.DescribeInstanceAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeInstanceStatus() {
	svc := ec2.New(nil)

	params := &ec2.DescribeInstanceStatusInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		IncludeAllInstances: aws.BoolPtr(true),
		InstanceIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
	}
	resp, err := svc.DescribeInstanceStatus(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeInstances() {
	svc := ec2.New(nil)

	params := &ec2.DescribeInstancesInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		InstanceIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
	}
	resp, err := svc.DescribeInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeInternetGateways() {
	svc := ec2.New(nil)

	params := &ec2.DescribeInternetGatewaysInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		InternetGatewayIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeInternetGateways(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeKeyPairs() {
	svc := ec2.New(nil)

	params := &ec2.DescribeKeyPairsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		KeyNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeKeyPairs(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeMovingAddresses() {
	svc := ec2.New(nil)

	params := &ec2.DescribeMovingAddressesInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
		PublicIPs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeMovingAddresses(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeNetworkACLs() {
	svc := ec2.New(nil)

	params := &ec2.DescribeNetworkACLsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		NetworkACLIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeNetworkACLs(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeNetworkInterfaceAttribute() {
	svc := ec2.New(nil)

	params := &ec2.DescribeNetworkInterfaceAttributeInput{
		NetworkInterfaceID: aws.StringPtr("String"), // Required
		Attribute:          aws.StringPtr("NetworkInterfaceAttribute"),
		DryRun:             aws.BoolPtr(true),
	}
	resp, err := svc.DescribeNetworkInterfaceAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeNetworkInterfaces() {
	svc := ec2.New(nil)

	params := &ec2.DescribeNetworkInterfacesInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		NetworkInterfaceIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeNetworkInterfaces(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribePlacementGroups() {
	svc := ec2.New(nil)

	params := &ec2.DescribePlacementGroupsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		GroupNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribePlacementGroups(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribePrefixLists() {
	svc := ec2.New(nil)

	params := &ec2.DescribePrefixListsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
		PrefixListIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribePrefixLists(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeRegions() {
	svc := ec2.New(nil)

	params := &ec2.DescribeRegionsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		RegionNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeRegions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeReservedInstances() {
	svc := ec2.New(nil)

	params := &ec2.DescribeReservedInstancesInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		OfferingType: aws.StringPtr("OfferingTypeValues"),
		ReservedInstancesIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeReservedInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeReservedInstancesListings() {
	svc := ec2.New(nil)

	params := &ec2.DescribeReservedInstancesListingsInput{
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		ReservedInstancesID:        aws.StringPtr("String"),
		ReservedInstancesListingID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeReservedInstancesListings(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeReservedInstancesModifications() {
	svc := ec2.New(nil)

	params := &ec2.DescribeReservedInstancesModificationsInput{
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		NextToken: aws.StringPtr("String"),
		ReservedInstancesModificationIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeReservedInstancesModifications(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeReservedInstancesOfferings() {
	svc := ec2.New(nil)

	params := &ec2.DescribeReservedInstancesOfferingsInput{
		AvailabilityZone: aws.StringPtr("String"),
		DryRun:           aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		IncludeMarketplace: aws.BoolPtr(true),
		InstanceTenancy:    aws.StringPtr("Tenancy"),
		InstanceType:       aws.StringPtr("InstanceType"),
		MaxDuration:        aws.Int64Ptr(1),
		MaxInstanceCount:   aws.Int64Ptr(1),
		MaxResults:         aws.Int64Ptr(1),
		MinDuration:        aws.Int64Ptr(1),
		NextToken:          aws.StringPtr("String"),
		OfferingType:       aws.StringPtr("OfferingTypeValues"),
		ProductDescription: aws.StringPtr("RIProductDescription"),
		ReservedInstancesOfferingIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeReservedInstancesOfferings(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeRouteTables() {
	svc := ec2.New(nil)

	params := &ec2.DescribeRouteTablesInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		RouteTableIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeRouteTables(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSecurityGroups() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSecurityGroupsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		GroupIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		GroupNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeSecurityGroups(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSnapshotAttribute() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSnapshotAttributeInput{
		Attribute:  aws.StringPtr("SnapshotAttributeName"), // Required
		SnapshotID: aws.StringPtr("String"),                // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.DescribeSnapshotAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSnapshots() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSnapshotsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
		OwnerIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		RestorableByUserIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SnapshotIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeSnapshots(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSpotDatafeedSubscription() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSpotDatafeedSubscriptionInput{
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.DescribeSpotDatafeedSubscription(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSpotFleetInstances() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSpotFleetInstancesInput{
		SpotFleetRequestID: aws.StringPtr("String"), // Required
		DryRun:             aws.BoolPtr(true),
		MaxResults:         aws.Int64Ptr(1),
		NextToken:          aws.StringPtr("String"),
	}
	resp, err := svc.DescribeSpotFleetInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSpotFleetRequestHistory() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSpotFleetRequestHistoryInput{
		SpotFleetRequestID: aws.StringPtr("String"), // Required
		StartTime:          aws.TimePtr(time.Now()), // Required
		DryRun:             aws.BoolPtr(true),
		EventType:          aws.StringPtr("EventType"),
		MaxResults:         aws.Int64Ptr(1),
		NextToken:          aws.StringPtr("String"),
	}
	resp, err := svc.DescribeSpotFleetRequestHistory(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSpotFleetRequests() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSpotFleetRequestsInput{
		DryRun:     aws.BoolPtr(true),
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
		SpotFleetRequestIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeSpotFleetRequests(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSpotInstanceRequests() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSpotInstanceRequestsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		SpotInstanceRequestIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeSpotInstanceRequests(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSpotPriceHistory() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSpotPriceHistoryInput{
		AvailabilityZone: aws.StringPtr("String"),
		DryRun:           aws.BoolPtr(true),
		EndTime:          aws.TimePtr(time.Now()),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		InstanceTypes: []*string{
			aws.StringPtr("InstanceType"), // Required
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
		ProductDescriptions: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		StartTime: aws.TimePtr(time.Now()),
	}
	resp, err := svc.DescribeSpotPriceHistory(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeSubnets() {
	svc := ec2.New(nil)

	params := &ec2.DescribeSubnetsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		SubnetIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeSubnets(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeTags() {
	svc := ec2.New(nil)

	params := &ec2.DescribeTagsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
	}
	resp, err := svc.DescribeTags(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVPCAttribute() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVPCAttributeInput{
		VPCID:     aws.StringPtr("String"), // Required
		Attribute: aws.StringPtr("VpcAttributeName"),
		DryRun:    aws.BoolPtr(true),
	}
	resp, err := svc.DescribeVPCAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVPCClassicLink() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVPCClassicLinkInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		VPCIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVPCClassicLink(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVPCEndpointServices() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVPCEndpointServicesInput{
		DryRun:     aws.BoolPtr(true),
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
	}
	resp, err := svc.DescribeVPCEndpointServices(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVPCEndpoints() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVPCEndpointsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
		VPCEndpointIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVPCEndpoints(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVPCPeeringConnections() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVPCPeeringConnectionsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		VPCPeeringConnectionIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVPCPeeringConnections(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVPCs() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVPCsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		VPCIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVPCs(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVPNConnections() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVPNConnectionsInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		VPNConnectionIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVPNConnections(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVPNGateways() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVPNGatewaysInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		VPNGatewayIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVPNGateways(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVolumeAttribute() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVolumeAttributeInput{
		VolumeID:  aws.StringPtr("String"), // Required
		Attribute: aws.StringPtr("VolumeAttributeName"),
		DryRun:    aws.BoolPtr(true),
	}
	resp, err := svc.DescribeVolumeAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVolumeStatus() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVolumeStatusInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
		VolumeIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVolumeStatus(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DescribeVolumes() {
	svc := ec2.New(nil)

	params := &ec2.DescribeVolumesInput{
		DryRun: aws.BoolPtr(true),
		Filters: []*ec2.Filter{
			{ // Required
				Name: aws.StringPtr("String"),
				Values: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
			},
			// More values...
		},
		MaxResults: aws.Int64Ptr(1),
		NextToken:  aws.StringPtr("String"),
		VolumeIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVolumes(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DetachClassicLinkVPC() {
	svc := ec2.New(nil)

	params := &ec2.DetachClassicLinkVPCInput{
		InstanceID: aws.StringPtr("String"), // Required
		VPCID:      aws.StringPtr("String"), // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.DetachClassicLinkVPC(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DetachInternetGateway() {
	svc := ec2.New(nil)

	params := &ec2.DetachInternetGatewayInput{
		InternetGatewayID: aws.StringPtr("String"), // Required
		VPCID:             aws.StringPtr("String"), // Required
		DryRun:            aws.BoolPtr(true),
	}
	resp, err := svc.DetachInternetGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DetachNetworkInterface() {
	svc := ec2.New(nil)

	params := &ec2.DetachNetworkInterfaceInput{
		AttachmentID: aws.StringPtr("String"), // Required
		DryRun:       aws.BoolPtr(true),
		Force:        aws.BoolPtr(true),
	}
	resp, err := svc.DetachNetworkInterface(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DetachVPNGateway() {
	svc := ec2.New(nil)

	params := &ec2.DetachVPNGatewayInput{
		VPCID:        aws.StringPtr("String"), // Required
		VPNGatewayID: aws.StringPtr("String"), // Required
		DryRun:       aws.BoolPtr(true),
	}
	resp, err := svc.DetachVPNGateway(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DetachVolume() {
	svc := ec2.New(nil)

	params := &ec2.DetachVolumeInput{
		VolumeID:   aws.StringPtr("String"), // Required
		Device:     aws.StringPtr("String"),
		DryRun:     aws.BoolPtr(true),
		Force:      aws.BoolPtr(true),
		InstanceID: aws.StringPtr("String"),
	}
	resp, err := svc.DetachVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DisableVGWRoutePropagation() {
	svc := ec2.New(nil)

	params := &ec2.DisableVGWRoutePropagationInput{
		GatewayID:    aws.StringPtr("String"), // Required
		RouteTableID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DisableVGWRoutePropagation(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DisableVPCClassicLink() {
	svc := ec2.New(nil)

	params := &ec2.DisableVPCClassicLinkInput{
		VPCID:  aws.StringPtr("String"), // Required
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.DisableVPCClassicLink(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DisassociateAddress() {
	svc := ec2.New(nil)

	params := &ec2.DisassociateAddressInput{
		AssociationID: aws.StringPtr("String"),
		DryRun:        aws.BoolPtr(true),
		PublicIP:      aws.StringPtr("String"),
	}
	resp, err := svc.DisassociateAddress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_DisassociateRouteTable() {
	svc := ec2.New(nil)

	params := &ec2.DisassociateRouteTableInput{
		AssociationID: aws.StringPtr("String"), // Required
		DryRun:        aws.BoolPtr(true),
	}
	resp, err := svc.DisassociateRouteTable(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_EnableVGWRoutePropagation() {
	svc := ec2.New(nil)

	params := &ec2.EnableVGWRoutePropagationInput{
		GatewayID:    aws.StringPtr("String"), // Required
		RouteTableID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.EnableVGWRoutePropagation(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_EnableVPCClassicLink() {
	svc := ec2.New(nil)

	params := &ec2.EnableVPCClassicLinkInput{
		VPCID:  aws.StringPtr("String"), // Required
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.EnableVPCClassicLink(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_EnableVolumeIO() {
	svc := ec2.New(nil)

	params := &ec2.EnableVolumeIOInput{
		VolumeID: aws.StringPtr("String"), // Required
		DryRun:   aws.BoolPtr(true),
	}
	resp, err := svc.EnableVolumeIO(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_GetConsoleOutput() {
	svc := ec2.New(nil)

	params := &ec2.GetConsoleOutputInput{
		InstanceID: aws.StringPtr("String"), // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.GetConsoleOutput(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_GetPasswordData() {
	svc := ec2.New(nil)

	params := &ec2.GetPasswordDataInput{
		InstanceID: aws.StringPtr("String"), // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.GetPasswordData(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ImportImage() {
	svc := ec2.New(nil)

	params := &ec2.ImportImageInput{
		Architecture: aws.StringPtr("String"),
		ClientData: &ec2.ClientData{
			Comment:     aws.StringPtr("String"),
			UploadEnd:   aws.TimePtr(time.Now()),
			UploadSize:  aws.Float64Ptr(1.0),
			UploadStart: aws.TimePtr(time.Now()),
		},
		ClientToken: aws.StringPtr("String"),
		Description: aws.StringPtr("String"),
		DiskContainers: []*ec2.ImageDiskContainer{
			{ // Required
				Description: aws.StringPtr("String"),
				DeviceName:  aws.StringPtr("String"),
				Format:      aws.StringPtr("String"),
				SnapshotID:  aws.StringPtr("String"),
				URL:         aws.StringPtr("String"),
				UserBucket: &ec2.UserBucket{
					S3Bucket: aws.StringPtr("String"),
					S3Key:    aws.StringPtr("String"),
				},
			},
			// More values...
		},
		DryRun:      aws.BoolPtr(true),
		Hypervisor:  aws.StringPtr("String"),
		LicenseType: aws.StringPtr("String"),
		Platform:    aws.StringPtr("String"),
		RoleName:    aws.StringPtr("String"),
	}
	resp, err := svc.ImportImage(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ImportInstance() {
	svc := ec2.New(nil)

	params := &ec2.ImportInstanceInput{
		Platform:    aws.StringPtr("PlatformValues"), // Required
		Description: aws.StringPtr("String"),
		DiskImages: []*ec2.DiskImage{
			{ // Required
				Description: aws.StringPtr("String"),
				Image: &ec2.DiskImageDetail{
					Bytes:             aws.Int64Ptr(1),                  // Required
					Format:            aws.StringPtr("DiskImageFormat"), // Required
					ImportManifestURL: aws.StringPtr("String"),          // Required
				},
				Volume: &ec2.VolumeDetail{
					Size: aws.Int64Ptr(1), // Required
				},
			},
			// More values...
		},
		DryRun: aws.BoolPtr(true),
		LaunchSpecification: &ec2.ImportInstanceLaunchSpecification{
			AdditionalInfo: aws.StringPtr("String"),
			Architecture:   aws.StringPtr("ArchitectureValues"),
			GroupIDs: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			GroupNames: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			InstanceInitiatedShutdownBehavior: aws.StringPtr("ShutdownBehavior"),
			InstanceType:                      aws.StringPtr("InstanceType"),
			Monitoring:                        aws.BoolPtr(true),
			Placement: &ec2.Placement{
				AvailabilityZone: aws.StringPtr("String"),
				GroupName:        aws.StringPtr("String"),
				Tenancy:          aws.StringPtr("Tenancy"),
			},
			PrivateIPAddress: aws.StringPtr("String"),
			SubnetID:         aws.StringPtr("String"),
			UserData: &ec2.UserData{
				Data: aws.StringPtr("String"),
			},
		},
	}
	resp, err := svc.ImportInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ImportKeyPair() {
	svc := ec2.New(nil)

	params := &ec2.ImportKeyPairInput{
		KeyName:           aws.StringPtr("String"), // Required
		PublicKeyMaterial: []byte("PAYLOAD"),       // Required
		DryRun:            aws.BoolPtr(true),
	}
	resp, err := svc.ImportKeyPair(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ImportSnapshot() {
	svc := ec2.New(nil)

	params := &ec2.ImportSnapshotInput{
		ClientData: &ec2.ClientData{
			Comment:     aws.StringPtr("String"),
			UploadEnd:   aws.TimePtr(time.Now()),
			UploadSize:  aws.Float64Ptr(1.0),
			UploadStart: aws.TimePtr(time.Now()),
		},
		ClientToken: aws.StringPtr("String"),
		Description: aws.StringPtr("String"),
		DiskContainer: &ec2.SnapshotDiskContainer{
			Description: aws.StringPtr("String"),
			Format:      aws.StringPtr("String"),
			URL:         aws.StringPtr("String"),
			UserBucket: &ec2.UserBucket{
				S3Bucket: aws.StringPtr("String"),
				S3Key:    aws.StringPtr("String"),
			},
		},
		DryRun:   aws.BoolPtr(true),
		RoleName: aws.StringPtr("String"),
	}
	resp, err := svc.ImportSnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ImportVolume() {
	svc := ec2.New(nil)

	params := &ec2.ImportVolumeInput{
		AvailabilityZone: aws.StringPtr("String"), // Required
		Image: &ec2.DiskImageDetail{ // Required
			Bytes:             aws.Int64Ptr(1),                  // Required
			Format:            aws.StringPtr("DiskImageFormat"), // Required
			ImportManifestURL: aws.StringPtr("String"),          // Required
		},
		Volume: &ec2.VolumeDetail{ // Required
			Size: aws.Int64Ptr(1), // Required
		},
		Description: aws.StringPtr("String"),
		DryRun:      aws.BoolPtr(true),
	}
	resp, err := svc.ImportVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ModifyImageAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ModifyImageAttributeInput{
		ImageID:   aws.StringPtr("String"), // Required
		Attribute: aws.StringPtr("String"),
		Description: &ec2.AttributeValue{
			Value: aws.StringPtr("String"),
		},
		DryRun: aws.BoolPtr(true),
		LaunchPermission: &ec2.LaunchPermissionModifications{
			Add: []*ec2.LaunchPermission{
				{ // Required
					Group:  aws.StringPtr("PermissionGroup"),
					UserID: aws.StringPtr("String"),
				},
				// More values...
			},
			Remove: []*ec2.LaunchPermission{
				{ // Required
					Group:  aws.StringPtr("PermissionGroup"),
					UserID: aws.StringPtr("String"),
				},
				// More values...
			},
		},
		OperationType: aws.StringPtr("String"),
		ProductCodes: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		UserGroups: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		UserIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		Value: aws.StringPtr("String"),
	}
	resp, err := svc.ModifyImageAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ModifyInstanceAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ModifyInstanceAttributeInput{
		InstanceID: aws.StringPtr("String"), // Required
		Attribute:  aws.StringPtr("InstanceAttributeName"),
		BlockDeviceMappings: []*ec2.InstanceBlockDeviceMappingSpecification{
			{ // Required
				DeviceName: aws.StringPtr("String"),
				EBS: &ec2.EBSInstanceBlockDeviceSpecification{
					DeleteOnTermination: aws.BoolPtr(true),
					VolumeID:            aws.StringPtr("String"),
				},
				NoDevice:    aws.StringPtr("String"),
				VirtualName: aws.StringPtr("String"),
			},
			// More values...
		},
		DisableAPITermination: &ec2.AttributeBooleanValue{
			Value: aws.BoolPtr(true),
		},
		DryRun: aws.BoolPtr(true),
		EBSOptimized: &ec2.AttributeBooleanValue{
			Value: aws.BoolPtr(true),
		},
		Groups: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		InstanceInitiatedShutdownBehavior: &ec2.AttributeValue{
			Value: aws.StringPtr("String"),
		},
		InstanceType: &ec2.AttributeValue{
			Value: aws.StringPtr("String"),
		},
		Kernel: &ec2.AttributeValue{
			Value: aws.StringPtr("String"),
		},
		RAMDisk: &ec2.AttributeValue{
			Value: aws.StringPtr("String"),
		},
		SRIOVNetSupport: &ec2.AttributeValue{
			Value: aws.StringPtr("String"),
		},
		SourceDestCheck: &ec2.AttributeBooleanValue{
			Value: aws.BoolPtr(true),
		},
		UserData: &ec2.BlobAttributeValue{
			Value: []byte("PAYLOAD"),
		},
		Value: aws.StringPtr("String"),
	}
	resp, err := svc.ModifyInstanceAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ModifyNetworkInterfaceAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ModifyNetworkInterfaceAttributeInput{
		NetworkInterfaceID: aws.StringPtr("String"), // Required
		Attachment: &ec2.NetworkInterfaceAttachmentChanges{
			AttachmentID:        aws.StringPtr("String"),
			DeleteOnTermination: aws.BoolPtr(true),
		},
		Description: &ec2.AttributeValue{
			Value: aws.StringPtr("String"),
		},
		DryRun: aws.BoolPtr(true),
		Groups: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SourceDestCheck: &ec2.AttributeBooleanValue{
			Value: aws.BoolPtr(true),
		},
	}
	resp, err := svc.ModifyNetworkInterfaceAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ModifyReservedInstances() {
	svc := ec2.New(nil)

	params := &ec2.ModifyReservedInstancesInput{
		ReservedInstancesIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		TargetConfigurations: []*ec2.ReservedInstancesConfiguration{ // Required
			{ // Required
				AvailabilityZone: aws.StringPtr("String"),
				InstanceCount:    aws.Int64Ptr(1),
				InstanceType:     aws.StringPtr("InstanceType"),
				Platform:         aws.StringPtr("String"),
			},
			// More values...
		},
		ClientToken: aws.StringPtr("String"),
	}
	resp, err := svc.ModifyReservedInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ModifySnapshotAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ModifySnapshotAttributeInput{
		SnapshotID: aws.StringPtr("String"), // Required
		Attribute:  aws.StringPtr("SnapshotAttributeName"),
		CreateVolumePermission: &ec2.CreateVolumePermissionModifications{
			Add: []*ec2.CreateVolumePermission{
				{ // Required
					Group:  aws.StringPtr("PermissionGroup"),
					UserID: aws.StringPtr("String"),
				},
				// More values...
			},
			Remove: []*ec2.CreateVolumePermission{
				{ // Required
					Group:  aws.StringPtr("PermissionGroup"),
					UserID: aws.StringPtr("String"),
				},
				// More values...
			},
		},
		DryRun: aws.BoolPtr(true),
		GroupNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		OperationType: aws.StringPtr("String"),
		UserIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.ModifySnapshotAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ModifySubnetAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ModifySubnetAttributeInput{
		SubnetID: aws.StringPtr("String"), // Required
		MapPublicIPOnLaunch: &ec2.AttributeBooleanValue{
			Value: aws.BoolPtr(true),
		},
	}
	resp, err := svc.ModifySubnetAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ModifyVPCAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ModifyVPCAttributeInput{
		VPCID: aws.StringPtr("String"), // Required
		EnableDNSHostnames: &ec2.AttributeBooleanValue{
			Value: aws.BoolPtr(true),
		},
		EnableDNSSupport: &ec2.AttributeBooleanValue{
			Value: aws.BoolPtr(true),
		},
	}
	resp, err := svc.ModifyVPCAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ModifyVPCEndpoint() {
	svc := ec2.New(nil)

	params := &ec2.ModifyVPCEndpointInput{
		VPCEndpointID: aws.StringPtr("String"), // Required
		AddRouteTableIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun:         aws.BoolPtr(true),
		PolicyDocument: aws.StringPtr("String"),
		RemoveRouteTableIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		ResetPolicy: aws.BoolPtr(true),
	}
	resp, err := svc.ModifyVPCEndpoint(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ModifyVolumeAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ModifyVolumeAttributeInput{
		VolumeID: aws.StringPtr("String"), // Required
		AutoEnableIO: &ec2.AttributeBooleanValue{
			Value: aws.BoolPtr(true),
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.ModifyVolumeAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_MonitorInstances() {
	svc := ec2.New(nil)

	params := &ec2.MonitorInstancesInput{
		InstanceIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.MonitorInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_MoveAddressToVPC() {
	svc := ec2.New(nil)

	params := &ec2.MoveAddressToVPCInput{
		PublicIP: aws.StringPtr("String"), // Required
		DryRun:   aws.BoolPtr(true),
	}
	resp, err := svc.MoveAddressToVPC(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_PurchaseReservedInstancesOffering() {
	svc := ec2.New(nil)

	params := &ec2.PurchaseReservedInstancesOfferingInput{
		InstanceCount:               aws.Int64Ptr(1),         // Required
		ReservedInstancesOfferingID: aws.StringPtr("String"), // Required
		DryRun: aws.BoolPtr(true),
		LimitPrice: &ec2.ReservedInstanceLimitPrice{
			Amount:       aws.Float64Ptr(1.0),
			CurrencyCode: aws.StringPtr("CurrencyCodeValues"),
		},
	}
	resp, err := svc.PurchaseReservedInstancesOffering(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_RebootInstances() {
	svc := ec2.New(nil)

	params := &ec2.RebootInstancesInput{
		InstanceIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.RebootInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_RegisterImage() {
	svc := ec2.New(nil)

	params := &ec2.RegisterImageInput{
		Name:         aws.StringPtr("String"), // Required
		Architecture: aws.StringPtr("ArchitectureValues"),
		BlockDeviceMappings: []*ec2.BlockDeviceMapping{
			{ // Required
				DeviceName: aws.StringPtr("String"),
				EBS: &ec2.EBSBlockDevice{
					DeleteOnTermination: aws.BoolPtr(true),
					Encrypted:           aws.BoolPtr(true),
					IOPS:                aws.Int64Ptr(1),
					SnapshotID:          aws.StringPtr("String"),
					VolumeSize:          aws.Int64Ptr(1),
					VolumeType:          aws.StringPtr("VolumeType"),
				},
				NoDevice:    aws.StringPtr("String"),
				VirtualName: aws.StringPtr("String"),
			},
			// More values...
		},
		Description:        aws.StringPtr("String"),
		DryRun:             aws.BoolPtr(true),
		ImageLocation:      aws.StringPtr("String"),
		KernelID:           aws.StringPtr("String"),
		RAMDiskID:          aws.StringPtr("String"),
		RootDeviceName:     aws.StringPtr("String"),
		SRIOVNetSupport:    aws.StringPtr("String"),
		VirtualizationType: aws.StringPtr("String"),
	}
	resp, err := svc.RegisterImage(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_RejectVPCPeeringConnection() {
	svc := ec2.New(nil)

	params := &ec2.RejectVPCPeeringConnectionInput{
		VPCPeeringConnectionID: aws.StringPtr("String"), // Required
		DryRun:                 aws.BoolPtr(true),
	}
	resp, err := svc.RejectVPCPeeringConnection(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ReleaseAddress() {
	svc := ec2.New(nil)

	params := &ec2.ReleaseAddressInput{
		AllocationID: aws.StringPtr("String"),
		DryRun:       aws.BoolPtr(true),
		PublicIP:     aws.StringPtr("String"),
	}
	resp, err := svc.ReleaseAddress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ReplaceNetworkACLAssociation() {
	svc := ec2.New(nil)

	params := &ec2.ReplaceNetworkACLAssociationInput{
		AssociationID: aws.StringPtr("String"), // Required
		NetworkACLID:  aws.StringPtr("String"), // Required
		DryRun:        aws.BoolPtr(true),
	}
	resp, err := svc.ReplaceNetworkACLAssociation(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ReplaceNetworkACLEntry() {
	svc := ec2.New(nil)

	params := &ec2.ReplaceNetworkACLEntryInput{
		CIDRBlock:    aws.StringPtr("String"),     // Required
		Egress:       aws.BoolPtr(true),           // Required
		NetworkACLID: aws.StringPtr("String"),     // Required
		Protocol:     aws.StringPtr("String"),     // Required
		RuleAction:   aws.StringPtr("RuleAction"), // Required
		RuleNumber:   aws.Int64Ptr(1),             // Required
		DryRun:       aws.BoolPtr(true),
		ICMPTypeCode: &ec2.ICMPTypeCode{
			Code: aws.Int64Ptr(1),
			Type: aws.Int64Ptr(1),
		},
		PortRange: &ec2.PortRange{
			From: aws.Int64Ptr(1),
			To:   aws.Int64Ptr(1),
		},
	}
	resp, err := svc.ReplaceNetworkACLEntry(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ReplaceRoute() {
	svc := ec2.New(nil)

	params := &ec2.ReplaceRouteInput{
		DestinationCIDRBlock:   aws.StringPtr("String"), // Required
		RouteTableID:           aws.StringPtr("String"), // Required
		DryRun:                 aws.BoolPtr(true),
		GatewayID:              aws.StringPtr("String"),
		InstanceID:             aws.StringPtr("String"),
		NetworkInterfaceID:     aws.StringPtr("String"),
		VPCPeeringConnectionID: aws.StringPtr("String"),
	}
	resp, err := svc.ReplaceRoute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ReplaceRouteTableAssociation() {
	svc := ec2.New(nil)

	params := &ec2.ReplaceRouteTableAssociationInput{
		AssociationID: aws.StringPtr("String"), // Required
		RouteTableID:  aws.StringPtr("String"), // Required
		DryRun:        aws.BoolPtr(true),
	}
	resp, err := svc.ReplaceRouteTableAssociation(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ReportInstanceStatus() {
	svc := ec2.New(nil)

	params := &ec2.ReportInstanceStatusInput{
		Instances: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		ReasonCodes: []*string{ // Required
			aws.StringPtr("ReportInstanceReasonCodes"), // Required
			// More values...
		},
		Status:      aws.StringPtr("ReportStatusType"), // Required
		Description: aws.StringPtr("String"),
		DryRun:      aws.BoolPtr(true),
		EndTime:     aws.TimePtr(time.Now()),
		StartTime:   aws.TimePtr(time.Now()),
	}
	resp, err := svc.ReportInstanceStatus(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_RequestSpotFleet() {
	svc := ec2.New(nil)

	params := &ec2.RequestSpotFleetInput{
		SpotFleetRequestConfig: &ec2.SpotFleetRequestConfigData{ // Required
			IAMFleetRole: aws.StringPtr("String"), // Required
			LaunchSpecifications: []*ec2.LaunchSpecification{ // Required
				{ // Required
					AddressingType: aws.StringPtr("String"),
					BlockDeviceMappings: []*ec2.BlockDeviceMapping{
						{ // Required
							DeviceName: aws.StringPtr("String"),
							EBS: &ec2.EBSBlockDevice{
								DeleteOnTermination: aws.BoolPtr(true),
								Encrypted:           aws.BoolPtr(true),
								IOPS:                aws.Int64Ptr(1),
								SnapshotID:          aws.StringPtr("String"),
								VolumeSize:          aws.Int64Ptr(1),
								VolumeType:          aws.StringPtr("VolumeType"),
							},
							NoDevice:    aws.StringPtr("String"),
							VirtualName: aws.StringPtr("String"),
						},
						// More values...
					},
					EBSOptimized: aws.BoolPtr(true),
					IAMInstanceProfile: &ec2.IAMInstanceProfileSpecification{
						ARN:  aws.StringPtr("String"),
						Name: aws.StringPtr("String"),
					},
					ImageID:      aws.StringPtr("String"),
					InstanceType: aws.StringPtr("InstanceType"),
					KernelID:     aws.StringPtr("String"),
					KeyName:      aws.StringPtr("String"),
					Monitoring: &ec2.RunInstancesMonitoringEnabled{
						Enabled: aws.BoolPtr(true), // Required
					},
					NetworkInterfaces: []*ec2.InstanceNetworkInterfaceSpecification{
						{ // Required
							AssociatePublicIPAddress: aws.BoolPtr(true),
							DeleteOnTermination:      aws.BoolPtr(true),
							Description:              aws.StringPtr("String"),
							DeviceIndex:              aws.Int64Ptr(1),
							Groups: []*string{
								aws.StringPtr("String"), // Required
								// More values...
							},
							NetworkInterfaceID: aws.StringPtr("String"),
							PrivateIPAddress:   aws.StringPtr("String"),
							PrivateIPAddresses: []*ec2.PrivateIPAddressSpecification{
								{ // Required
									PrivateIPAddress: aws.StringPtr("String"), // Required
									Primary:          aws.BoolPtr(true),
								},
								// More values...
							},
							SecondaryPrivateIPAddressCount: aws.Int64Ptr(1),
							SubnetID:                       aws.StringPtr("String"),
						},
						// More values...
					},
					Placement: &ec2.SpotPlacement{
						AvailabilityZone: aws.StringPtr("String"),
						GroupName:        aws.StringPtr("String"),
					},
					RAMDiskID: aws.StringPtr("String"),
					SecurityGroups: []*ec2.GroupIdentifier{
						{ // Required
							GroupID:   aws.StringPtr("String"),
							GroupName: aws.StringPtr("String"),
						},
						// More values...
					},
					SubnetID: aws.StringPtr("String"),
					UserData: aws.StringPtr("String"),
				},
				// More values...
			},
			SpotPrice:                        aws.StringPtr("String"), // Required
			TargetCapacity:                   aws.Int64Ptr(1),         // Required
			ClientToken:                      aws.StringPtr("String"),
			TerminateInstancesWithExpiration: aws.BoolPtr(true),
			ValidFrom:                        aws.TimePtr(time.Now()),
			ValidUntil:                       aws.TimePtr(time.Now()),
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.RequestSpotFleet(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_RequestSpotInstances() {
	svc := ec2.New(nil)

	params := &ec2.RequestSpotInstancesInput{
		SpotPrice:             aws.StringPtr("String"), // Required
		AvailabilityZoneGroup: aws.StringPtr("String"),
		ClientToken:           aws.StringPtr("String"),
		DryRun:                aws.BoolPtr(true),
		InstanceCount:         aws.Int64Ptr(1),
		LaunchGroup:           aws.StringPtr("String"),
		LaunchSpecification: &ec2.RequestSpotLaunchSpecification{
			AddressingType: aws.StringPtr("String"),
			BlockDeviceMappings: []*ec2.BlockDeviceMapping{
				{ // Required
					DeviceName: aws.StringPtr("String"),
					EBS: &ec2.EBSBlockDevice{
						DeleteOnTermination: aws.BoolPtr(true),
						Encrypted:           aws.BoolPtr(true),
						IOPS:                aws.Int64Ptr(1),
						SnapshotID:          aws.StringPtr("String"),
						VolumeSize:          aws.Int64Ptr(1),
						VolumeType:          aws.StringPtr("VolumeType"),
					},
					NoDevice:    aws.StringPtr("String"),
					VirtualName: aws.StringPtr("String"),
				},
				// More values...
			},
			EBSOptimized: aws.BoolPtr(true),
			IAMInstanceProfile: &ec2.IAMInstanceProfileSpecification{
				ARN:  aws.StringPtr("String"),
				Name: aws.StringPtr("String"),
			},
			ImageID:      aws.StringPtr("String"),
			InstanceType: aws.StringPtr("InstanceType"),
			KernelID:     aws.StringPtr("String"),
			KeyName:      aws.StringPtr("String"),
			Monitoring: &ec2.RunInstancesMonitoringEnabled{
				Enabled: aws.BoolPtr(true), // Required
			},
			NetworkInterfaces: []*ec2.InstanceNetworkInterfaceSpecification{
				{ // Required
					AssociatePublicIPAddress: aws.BoolPtr(true),
					DeleteOnTermination:      aws.BoolPtr(true),
					Description:              aws.StringPtr("String"),
					DeviceIndex:              aws.Int64Ptr(1),
					Groups: []*string{
						aws.StringPtr("String"), // Required
						// More values...
					},
					NetworkInterfaceID: aws.StringPtr("String"),
					PrivateIPAddress:   aws.StringPtr("String"),
					PrivateIPAddresses: []*ec2.PrivateIPAddressSpecification{
						{ // Required
							PrivateIPAddress: aws.StringPtr("String"), // Required
							Primary:          aws.BoolPtr(true),
						},
						// More values...
					},
					SecondaryPrivateIPAddressCount: aws.Int64Ptr(1),
					SubnetID:                       aws.StringPtr("String"),
				},
				// More values...
			},
			Placement: &ec2.SpotPlacement{
				AvailabilityZone: aws.StringPtr("String"),
				GroupName:        aws.StringPtr("String"),
			},
			RAMDiskID: aws.StringPtr("String"),
			SecurityGroupIDs: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			SecurityGroups: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			SubnetID: aws.StringPtr("String"),
			UserData: aws.StringPtr("String"),
		},
		Type:       aws.StringPtr("SpotInstanceType"),
		ValidFrom:  aws.TimePtr(time.Now()),
		ValidUntil: aws.TimePtr(time.Now()),
	}
	resp, err := svc.RequestSpotInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ResetImageAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ResetImageAttributeInput{
		Attribute: aws.StringPtr("ResetImageAttributeName"), // Required
		ImageID:   aws.StringPtr("String"),                  // Required
		DryRun:    aws.BoolPtr(true),
	}
	resp, err := svc.ResetImageAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ResetInstanceAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ResetInstanceAttributeInput{
		Attribute:  aws.StringPtr("InstanceAttributeName"), // Required
		InstanceID: aws.StringPtr("String"),                // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.ResetInstanceAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ResetNetworkInterfaceAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ResetNetworkInterfaceAttributeInput{
		NetworkInterfaceID: aws.StringPtr("String"), // Required
		DryRun:             aws.BoolPtr(true),
		SourceDestCheck:    aws.StringPtr("String"),
	}
	resp, err := svc.ResetNetworkInterfaceAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_ResetSnapshotAttribute() {
	svc := ec2.New(nil)

	params := &ec2.ResetSnapshotAttributeInput{
		Attribute:  aws.StringPtr("SnapshotAttributeName"), // Required
		SnapshotID: aws.StringPtr("String"),                // Required
		DryRun:     aws.BoolPtr(true),
	}
	resp, err := svc.ResetSnapshotAttribute(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_RestoreAddressToClassic() {
	svc := ec2.New(nil)

	params := &ec2.RestoreAddressToClassicInput{
		PublicIP: aws.StringPtr("String"), // Required
		DryRun:   aws.BoolPtr(true),
	}
	resp, err := svc.RestoreAddressToClassic(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_RevokeSecurityGroupEgress() {
	svc := ec2.New(nil)

	params := &ec2.RevokeSecurityGroupEgressInput{
		GroupID:  aws.StringPtr("String"), // Required
		CIDRIP:   aws.StringPtr("String"),
		DryRun:   aws.BoolPtr(true),
		FromPort: aws.Int64Ptr(1),
		IPPermissions: []*ec2.IPPermission{
			{ // Required
				FromPort:   aws.Int64Ptr(1),
				IPProtocol: aws.StringPtr("String"),
				IPRanges: []*ec2.IPRange{
					{ // Required
						CIDRIP: aws.StringPtr("String"),
					},
					// More values...
				},
				PrefixListIDs: []*ec2.PrefixListID{
					{ // Required
						PrefixListID: aws.StringPtr("String"),
					},
					// More values...
				},
				ToPort: aws.Int64Ptr(1),
				UserIDGroupPairs: []*ec2.UserIDGroupPair{
					{ // Required
						GroupID:   aws.StringPtr("String"),
						GroupName: aws.StringPtr("String"),
						UserID:    aws.StringPtr("String"),
					},
					// More values...
				},
			},
			// More values...
		},
		IPProtocol:                 aws.StringPtr("String"),
		SourceSecurityGroupName:    aws.StringPtr("String"),
		SourceSecurityGroupOwnerID: aws.StringPtr("String"),
		ToPort: aws.Int64Ptr(1),
	}
	resp, err := svc.RevokeSecurityGroupEgress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_RevokeSecurityGroupIngress() {
	svc := ec2.New(nil)

	params := &ec2.RevokeSecurityGroupIngressInput{
		CIDRIP:    aws.StringPtr("String"),
		DryRun:    aws.BoolPtr(true),
		FromPort:  aws.Int64Ptr(1),
		GroupID:   aws.StringPtr("String"),
		GroupName: aws.StringPtr("String"),
		IPPermissions: []*ec2.IPPermission{
			{ // Required
				FromPort:   aws.Int64Ptr(1),
				IPProtocol: aws.StringPtr("String"),
				IPRanges: []*ec2.IPRange{
					{ // Required
						CIDRIP: aws.StringPtr("String"),
					},
					// More values...
				},
				PrefixListIDs: []*ec2.PrefixListID{
					{ // Required
						PrefixListID: aws.StringPtr("String"),
					},
					// More values...
				},
				ToPort: aws.Int64Ptr(1),
				UserIDGroupPairs: []*ec2.UserIDGroupPair{
					{ // Required
						GroupID:   aws.StringPtr("String"),
						GroupName: aws.StringPtr("String"),
						UserID:    aws.StringPtr("String"),
					},
					// More values...
				},
			},
			// More values...
		},
		IPProtocol:                 aws.StringPtr("String"),
		SourceSecurityGroupName:    aws.StringPtr("String"),
		SourceSecurityGroupOwnerID: aws.StringPtr("String"),
		ToPort: aws.Int64Ptr(1),
	}
	resp, err := svc.RevokeSecurityGroupIngress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_RunInstances() {
	svc := ec2.New(nil)

	params := &ec2.RunInstancesInput{
		ImageID:        aws.StringPtr("String"), // Required
		MaxCount:       aws.Int64Ptr(1),         // Required
		MinCount:       aws.Int64Ptr(1),         // Required
		AdditionalInfo: aws.StringPtr("String"),
		BlockDeviceMappings: []*ec2.BlockDeviceMapping{
			{ // Required
				DeviceName: aws.StringPtr("String"),
				EBS: &ec2.EBSBlockDevice{
					DeleteOnTermination: aws.BoolPtr(true),
					Encrypted:           aws.BoolPtr(true),
					IOPS:                aws.Int64Ptr(1),
					SnapshotID:          aws.StringPtr("String"),
					VolumeSize:          aws.Int64Ptr(1),
					VolumeType:          aws.StringPtr("VolumeType"),
				},
				NoDevice:    aws.StringPtr("String"),
				VirtualName: aws.StringPtr("String"),
			},
			// More values...
		},
		ClientToken:           aws.StringPtr("String"),
		DisableAPITermination: aws.BoolPtr(true),
		DryRun:                aws.BoolPtr(true),
		EBSOptimized:          aws.BoolPtr(true),
		IAMInstanceProfile: &ec2.IAMInstanceProfileSpecification{
			ARN:  aws.StringPtr("String"),
			Name: aws.StringPtr("String"),
		},
		InstanceInitiatedShutdownBehavior: aws.StringPtr("ShutdownBehavior"),
		InstanceType:                      aws.StringPtr("InstanceType"),
		KernelID:                          aws.StringPtr("String"),
		KeyName:                           aws.StringPtr("String"),
		Monitoring: &ec2.RunInstancesMonitoringEnabled{
			Enabled: aws.BoolPtr(true), // Required
		},
		NetworkInterfaces: []*ec2.InstanceNetworkInterfaceSpecification{
			{ // Required
				AssociatePublicIPAddress: aws.BoolPtr(true),
				DeleteOnTermination:      aws.BoolPtr(true),
				Description:              aws.StringPtr("String"),
				DeviceIndex:              aws.Int64Ptr(1),
				Groups: []*string{
					aws.StringPtr("String"), // Required
					// More values...
				},
				NetworkInterfaceID: aws.StringPtr("String"),
				PrivateIPAddress:   aws.StringPtr("String"),
				PrivateIPAddresses: []*ec2.PrivateIPAddressSpecification{
					{ // Required
						PrivateIPAddress: aws.StringPtr("String"), // Required
						Primary:          aws.BoolPtr(true),
					},
					// More values...
				},
				SecondaryPrivateIPAddressCount: aws.Int64Ptr(1),
				SubnetID:                       aws.StringPtr("String"),
			},
			// More values...
		},
		Placement: &ec2.Placement{
			AvailabilityZone: aws.StringPtr("String"),
			GroupName:        aws.StringPtr("String"),
			Tenancy:          aws.StringPtr("Tenancy"),
		},
		PrivateIPAddress: aws.StringPtr("String"),
		RAMDiskID:        aws.StringPtr("String"),
		SecurityGroupIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SecurityGroups: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SubnetID: aws.StringPtr("String"),
		UserData: aws.StringPtr("String"),
	}
	resp, err := svc.RunInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_StartInstances() {
	svc := ec2.New(nil)

	params := &ec2.StartInstancesInput{
		InstanceIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		AdditionalInfo: aws.StringPtr("String"),
		DryRun:         aws.BoolPtr(true),
	}
	resp, err := svc.StartInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_StopInstances() {
	svc := ec2.New(nil)

	params := &ec2.StopInstancesInput{
		InstanceIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
		Force:  aws.BoolPtr(true),
	}
	resp, err := svc.StopInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_TerminateInstances() {
	svc := ec2.New(nil)

	params := &ec2.TerminateInstancesInput{
		InstanceIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.TerminateInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_UnassignPrivateIPAddresses() {
	svc := ec2.New(nil)

	params := &ec2.UnassignPrivateIPAddressesInput{
		NetworkInterfaceID: aws.StringPtr("String"), // Required
		PrivateIPAddresses: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.UnassignPrivateIPAddresses(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleEC2_UnmonitorInstances() {
	svc := ec2.New(nil)

	params := &ec2.UnmonitorInstancesInput{
		InstanceIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		DryRun: aws.BoolPtr(true),
	}
	resp, err := svc.UnmonitorInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}
