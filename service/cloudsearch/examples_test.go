// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package cloudsearch_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/service/cloudsearch"
)

var _ time.Duration
var _ bytes.Buffer

func ExampleCloudSearch_BuildSuggesters() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.BuildSuggestersInput{
		DomainName: aws.StringPtr("DomainName"), // Required
	}
	resp, err := svc.BuildSuggesters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_CreateDomain() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.CreateDomainInput{
		DomainName: aws.StringPtr("DomainName"), // Required
	}
	resp, err := svc.CreateDomain(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DefineAnalysisScheme() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DefineAnalysisSchemeInput{
		AnalysisScheme: &cloudsearch.AnalysisScheme{ // Required
			AnalysisSchemeLanguage: aws.StringPtr("AnalysisSchemeLanguage"), // Required
			AnalysisSchemeName:     aws.StringPtr("StandardName"),           // Required
			AnalysisOptions: &cloudsearch.AnalysisOptions{
				AlgorithmicStemming:            aws.StringPtr("AlgorithmicStemming"),
				JapaneseTokenizationDictionary: aws.StringPtr("String"),
				StemmingDictionary:             aws.StringPtr("String"),
				Stopwords:                      aws.StringPtr("String"),
				Synonyms:                       aws.StringPtr("String"),
			},
		},
		DomainName: aws.StringPtr("DomainName"), // Required
	}
	resp, err := svc.DefineAnalysisScheme(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DefineExpression() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DefineExpressionInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		Expression: &cloudsearch.Expression{ // Required
			ExpressionName:  aws.StringPtr("StandardName"),    // Required
			ExpressionValue: aws.StringPtr("ExpressionValue"), // Required
		},
	}
	resp, err := svc.DefineExpression(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DefineIndexField() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DefineIndexFieldInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		IndexField: &cloudsearch.IndexField{ // Required
			IndexFieldName: aws.StringPtr("DynamicFieldName"), // Required
			IndexFieldType: aws.StringPtr("IndexFieldType"),   // Required
			DateArrayOptions: &cloudsearch.DateArrayOptions{
				DefaultValue:  aws.StringPtr("FieldValue"),
				FacetEnabled:  aws.BoolPtr(true),
				ReturnEnabled: aws.BoolPtr(true),
				SearchEnabled: aws.BoolPtr(true),
				SourceFields:  aws.StringPtr("FieldNameCommaList"),
			},
			DateOptions: &cloudsearch.DateOptions{
				DefaultValue:  aws.StringPtr("FieldValue"),
				FacetEnabled:  aws.BoolPtr(true),
				ReturnEnabled: aws.BoolPtr(true),
				SearchEnabled: aws.BoolPtr(true),
				SortEnabled:   aws.BoolPtr(true),
				SourceField:   aws.StringPtr("FieldName"),
			},
			DoubleArrayOptions: &cloudsearch.DoubleArrayOptions{
				DefaultValue:  aws.Float64Ptr(1.0),
				FacetEnabled:  aws.BoolPtr(true),
				ReturnEnabled: aws.BoolPtr(true),
				SearchEnabled: aws.BoolPtr(true),
				SourceFields:  aws.StringPtr("FieldNameCommaList"),
			},
			DoubleOptions: &cloudsearch.DoubleOptions{
				DefaultValue:  aws.Float64Ptr(1.0),
				FacetEnabled:  aws.BoolPtr(true),
				ReturnEnabled: aws.BoolPtr(true),
				SearchEnabled: aws.BoolPtr(true),
				SortEnabled:   aws.BoolPtr(true),
				SourceField:   aws.StringPtr("FieldName"),
			},
			IntArrayOptions: &cloudsearch.IntArrayOptions{
				DefaultValue:  aws.Int64Ptr(1),
				FacetEnabled:  aws.BoolPtr(true),
				ReturnEnabled: aws.BoolPtr(true),
				SearchEnabled: aws.BoolPtr(true),
				SourceFields:  aws.StringPtr("FieldNameCommaList"),
			},
			IntOptions: &cloudsearch.IntOptions{
				DefaultValue:  aws.Int64Ptr(1),
				FacetEnabled:  aws.BoolPtr(true),
				ReturnEnabled: aws.BoolPtr(true),
				SearchEnabled: aws.BoolPtr(true),
				SortEnabled:   aws.BoolPtr(true),
				SourceField:   aws.StringPtr("FieldName"),
			},
			LatLonOptions: &cloudsearch.LatLonOptions{
				DefaultValue:  aws.StringPtr("FieldValue"),
				FacetEnabled:  aws.BoolPtr(true),
				ReturnEnabled: aws.BoolPtr(true),
				SearchEnabled: aws.BoolPtr(true),
				SortEnabled:   aws.BoolPtr(true),
				SourceField:   aws.StringPtr("FieldName"),
			},
			LiteralArrayOptions: &cloudsearch.LiteralArrayOptions{
				DefaultValue:  aws.StringPtr("FieldValue"),
				FacetEnabled:  aws.BoolPtr(true),
				ReturnEnabled: aws.BoolPtr(true),
				SearchEnabled: aws.BoolPtr(true),
				SourceFields:  aws.StringPtr("FieldNameCommaList"),
			},
			LiteralOptions: &cloudsearch.LiteralOptions{
				DefaultValue:  aws.StringPtr("FieldValue"),
				FacetEnabled:  aws.BoolPtr(true),
				ReturnEnabled: aws.BoolPtr(true),
				SearchEnabled: aws.BoolPtr(true),
				SortEnabled:   aws.BoolPtr(true),
				SourceField:   aws.StringPtr("FieldName"),
			},
			TextArrayOptions: &cloudsearch.TextArrayOptions{
				AnalysisScheme:   aws.StringPtr("Word"),
				DefaultValue:     aws.StringPtr("FieldValue"),
				HighlightEnabled: aws.BoolPtr(true),
				ReturnEnabled:    aws.BoolPtr(true),
				SourceFields:     aws.StringPtr("FieldNameCommaList"),
			},
			TextOptions: &cloudsearch.TextOptions{
				AnalysisScheme:   aws.StringPtr("Word"),
				DefaultValue:     aws.StringPtr("FieldValue"),
				HighlightEnabled: aws.BoolPtr(true),
				ReturnEnabled:    aws.BoolPtr(true),
				SortEnabled:      aws.BoolPtr(true),
				SourceField:      aws.StringPtr("FieldName"),
			},
		},
	}
	resp, err := svc.DefineIndexField(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DefineSuggester() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DefineSuggesterInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		Suggester: &cloudsearch.Suggester{ // Required
			DocumentSuggesterOptions: &cloudsearch.DocumentSuggesterOptions{ // Required
				SourceField:    aws.StringPtr("FieldName"), // Required
				FuzzyMatching:  aws.StringPtr("SuggesterFuzzyMatching"),
				SortExpression: aws.StringPtr("String"),
			},
			SuggesterName: aws.StringPtr("StandardName"), // Required
		},
	}
	resp, err := svc.DefineSuggester(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DeleteAnalysisScheme() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DeleteAnalysisSchemeInput{
		AnalysisSchemeName: aws.StringPtr("StandardName"), // Required
		DomainName:         aws.StringPtr("DomainName"),   // Required
	}
	resp, err := svc.DeleteAnalysisScheme(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DeleteDomain() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DeleteDomainInput{
		DomainName: aws.StringPtr("DomainName"), // Required
	}
	resp, err := svc.DeleteDomain(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DeleteExpression() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DeleteExpressionInput{
		DomainName:     aws.StringPtr("DomainName"),   // Required
		ExpressionName: aws.StringPtr("StandardName"), // Required
	}
	resp, err := svc.DeleteExpression(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DeleteIndexField() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DeleteIndexFieldInput{
		DomainName:     aws.StringPtr("DomainName"),       // Required
		IndexFieldName: aws.StringPtr("DynamicFieldName"), // Required
	}
	resp, err := svc.DeleteIndexField(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DeleteSuggester() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DeleteSuggesterInput{
		DomainName:    aws.StringPtr("DomainName"),   // Required
		SuggesterName: aws.StringPtr("StandardName"), // Required
	}
	resp, err := svc.DeleteSuggester(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DescribeAnalysisSchemes() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DescribeAnalysisSchemesInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		AnalysisSchemeNames: []*string{
			aws.StringPtr("StandardName"), // Required
			// More values...
		},
		Deployed: aws.BoolPtr(true),
	}
	resp, err := svc.DescribeAnalysisSchemes(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DescribeAvailabilityOptions() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DescribeAvailabilityOptionsInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		Deployed:   aws.BoolPtr(true),
	}
	resp, err := svc.DescribeAvailabilityOptions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DescribeDomains() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DescribeDomainsInput{
		DomainNames: []*string{
			aws.StringPtr("DomainName"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeDomains(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DescribeExpressions() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DescribeExpressionsInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		Deployed:   aws.BoolPtr(true),
		ExpressionNames: []*string{
			aws.StringPtr("StandardName"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeExpressions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DescribeIndexFields() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DescribeIndexFieldsInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		Deployed:   aws.BoolPtr(true),
		FieldNames: []*string{
			aws.StringPtr("DynamicFieldName"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeIndexFields(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DescribeScalingParameters() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DescribeScalingParametersInput{
		DomainName: aws.StringPtr("DomainName"), // Required
	}
	resp, err := svc.DescribeScalingParameters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DescribeServiceAccessPolicies() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DescribeServiceAccessPoliciesInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		Deployed:   aws.BoolPtr(true),
	}
	resp, err := svc.DescribeServiceAccessPolicies(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_DescribeSuggesters() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.DescribeSuggestersInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		Deployed:   aws.BoolPtr(true),
		SuggesterNames: []*string{
			aws.StringPtr("StandardName"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeSuggesters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_IndexDocuments() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.IndexDocumentsInput{
		DomainName: aws.StringPtr("DomainName"), // Required
	}
	resp, err := svc.IndexDocuments(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_ListDomainNames() {
	svc := cloudsearch.New(nil)

	var params *cloudsearch.ListDomainNamesInput
	resp, err := svc.ListDomainNames(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_UpdateAvailabilityOptions() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.UpdateAvailabilityOptionsInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		MultiAZ:    aws.BoolPtr(true),           // Required
	}
	resp, err := svc.UpdateAvailabilityOptions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_UpdateScalingParameters() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.UpdateScalingParametersInput{
		DomainName: aws.StringPtr("DomainName"), // Required
		ScalingParameters: &cloudsearch.ScalingParameters{ // Required
			DesiredInstanceType:     aws.StringPtr("PartitionInstanceType"),
			DesiredPartitionCount:   aws.Int64Ptr(1),
			DesiredReplicationCount: aws.Int64Ptr(1),
		},
	}
	resp, err := svc.UpdateScalingParameters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleCloudSearch_UpdateServiceAccessPolicies() {
	svc := cloudsearch.New(nil)

	params := &cloudsearch.UpdateServiceAccessPoliciesInput{
		AccessPolicies: aws.StringPtr("PolicyDocument"), // Required
		DomainName:     aws.StringPtr("DomainName"),     // Required
	}
	resp, err := svc.UpdateServiceAccessPolicies(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}
