// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package elasticache_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/service/elasticache"
)

var _ time.Duration
var _ bytes.Buffer

func ExampleElastiCache_AddTagsToResource() {
	svc := elasticache.New(nil)

	params := &elasticache.AddTagsToResourceInput{
		ResourceName: aws.StringPtr("String"), // Required
		Tags: []*elasticache.Tag{ // Required
			{ // Required
				Key:   aws.StringPtr("String"),
				Value: aws.StringPtr("String"),
			},
			// More values...
		},
	}
	resp, err := svc.AddTagsToResource(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_AuthorizeCacheSecurityGroupIngress() {
	svc := elasticache.New(nil)

	params := &elasticache.AuthorizeCacheSecurityGroupIngressInput{
		CacheSecurityGroupName:  aws.StringPtr("String"), // Required
		EC2SecurityGroupName:    aws.StringPtr("String"), // Required
		EC2SecurityGroupOwnerID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.AuthorizeCacheSecurityGroupIngress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_CopySnapshot() {
	svc := elasticache.New(nil)

	params := &elasticache.CopySnapshotInput{
		SourceSnapshotName: aws.StringPtr("String"), // Required
		TargetSnapshotName: aws.StringPtr("String"), // Required
	}
	resp, err := svc.CopySnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_CreateCacheCluster() {
	svc := elasticache.New(nil)

	params := &elasticache.CreateCacheClusterInput{
		CacheClusterID:          aws.StringPtr("String"), // Required
		AZMode:                  aws.StringPtr("AZMode"),
		AutoMinorVersionUpgrade: aws.BoolPtr(true),
		CacheNodeType:           aws.StringPtr("String"),
		CacheParameterGroupName: aws.StringPtr("String"),
		CacheSecurityGroupNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		CacheSubnetGroupName: aws.StringPtr("String"),
		Engine:               aws.StringPtr("String"),
		EngineVersion:        aws.StringPtr("String"),
		NotificationTopicARN: aws.StringPtr("String"),
		NumCacheNodes:        aws.Int64Ptr(1),
		Port:                 aws.Int64Ptr(1),
		PreferredAvailabilityZone: aws.StringPtr("String"),
		PreferredAvailabilityZones: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		PreferredMaintenanceWindow: aws.StringPtr("String"),
		ReplicationGroupID:         aws.StringPtr("String"),
		SecurityGroupIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SnapshotARNs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SnapshotName:           aws.StringPtr("String"),
		SnapshotRetentionLimit: aws.Int64Ptr(1),
		SnapshotWindow:         aws.StringPtr("String"),
		Tags: []*elasticache.Tag{
			{ // Required
				Key:   aws.StringPtr("String"),
				Value: aws.StringPtr("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateCacheCluster(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_CreateCacheParameterGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.CreateCacheParameterGroupInput{
		CacheParameterGroupFamily: aws.StringPtr("String"), // Required
		CacheParameterGroupName:   aws.StringPtr("String"), // Required
		Description:               aws.StringPtr("String"), // Required
	}
	resp, err := svc.CreateCacheParameterGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_CreateCacheSecurityGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.CreateCacheSecurityGroupInput{
		CacheSecurityGroupName: aws.StringPtr("String"), // Required
		Description:            aws.StringPtr("String"), // Required
	}
	resp, err := svc.CreateCacheSecurityGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_CreateCacheSubnetGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.CreateCacheSubnetGroupInput{
		CacheSubnetGroupDescription: aws.StringPtr("String"), // Required
		CacheSubnetGroupName:        aws.StringPtr("String"), // Required
		SubnetIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.CreateCacheSubnetGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_CreateReplicationGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.CreateReplicationGroupInput{
		ReplicationGroupDescription: aws.StringPtr("String"), // Required
		ReplicationGroupID:          aws.StringPtr("String"), // Required
		AutoMinorVersionUpgrade:     aws.BoolPtr(true),
		AutomaticFailoverEnabled:    aws.BoolPtr(true),
		CacheNodeType:               aws.StringPtr("String"),
		CacheParameterGroupName:     aws.StringPtr("String"),
		CacheSecurityGroupNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		CacheSubnetGroupName: aws.StringPtr("String"),
		Engine:               aws.StringPtr("String"),
		EngineVersion:        aws.StringPtr("String"),
		NotificationTopicARN: aws.StringPtr("String"),
		NumCacheClusters:     aws.Int64Ptr(1),
		Port:                 aws.Int64Ptr(1),
		PreferredCacheClusterAZs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		PreferredMaintenanceWindow: aws.StringPtr("String"),
		PrimaryClusterID:           aws.StringPtr("String"),
		SecurityGroupIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SnapshotARNs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SnapshotName:           aws.StringPtr("String"),
		SnapshotRetentionLimit: aws.Int64Ptr(1),
		SnapshotWindow:         aws.StringPtr("String"),
		Tags: []*elasticache.Tag{
			{ // Required
				Key:   aws.StringPtr("String"),
				Value: aws.StringPtr("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateReplicationGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_CreateSnapshot() {
	svc := elasticache.New(nil)

	params := &elasticache.CreateSnapshotInput{
		CacheClusterID: aws.StringPtr("String"), // Required
		SnapshotName:   aws.StringPtr("String"), // Required
	}
	resp, err := svc.CreateSnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DeleteCacheCluster() {
	svc := elasticache.New(nil)

	params := &elasticache.DeleteCacheClusterInput{
		CacheClusterID:          aws.StringPtr("String"), // Required
		FinalSnapshotIdentifier: aws.StringPtr("String"),
	}
	resp, err := svc.DeleteCacheCluster(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DeleteCacheParameterGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.DeleteCacheParameterGroupInput{
		CacheParameterGroupName: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeleteCacheParameterGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DeleteCacheSecurityGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.DeleteCacheSecurityGroupInput{
		CacheSecurityGroupName: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeleteCacheSecurityGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DeleteCacheSubnetGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.DeleteCacheSubnetGroupInput{
		CacheSubnetGroupName: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeleteCacheSubnetGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DeleteReplicationGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.DeleteReplicationGroupInput{
		ReplicationGroupID:      aws.StringPtr("String"), // Required
		FinalSnapshotIdentifier: aws.StringPtr("String"),
		RetainPrimaryCluster:    aws.BoolPtr(true),
	}
	resp, err := svc.DeleteReplicationGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DeleteSnapshot() {
	svc := elasticache.New(nil)

	params := &elasticache.DeleteSnapshotInput{
		SnapshotName: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeleteSnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeCacheClusters() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeCacheClustersInput{
		CacheClusterID:    aws.StringPtr("String"),
		Marker:            aws.StringPtr("String"),
		MaxRecords:        aws.Int64Ptr(1),
		ShowCacheNodeInfo: aws.BoolPtr(true),
	}
	resp, err := svc.DescribeCacheClusters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeCacheEngineVersions() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeCacheEngineVersionsInput{
		CacheParameterGroupFamily: aws.StringPtr("String"),
		DefaultOnly:               aws.BoolPtr(true),
		Engine:                    aws.StringPtr("String"),
		EngineVersion:             aws.StringPtr("String"),
		Marker:                    aws.StringPtr("String"),
		MaxRecords:                aws.Int64Ptr(1),
	}
	resp, err := svc.DescribeCacheEngineVersions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeCacheParameterGroups() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeCacheParameterGroupsInput{
		CacheParameterGroupName: aws.StringPtr("String"),
		Marker:                  aws.StringPtr("String"),
		MaxRecords:              aws.Int64Ptr(1),
	}
	resp, err := svc.DescribeCacheParameterGroups(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeCacheParameters() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeCacheParametersInput{
		CacheParameterGroupName: aws.StringPtr("String"), // Required
		Marker:                  aws.StringPtr("String"),
		MaxRecords:              aws.Int64Ptr(1),
		Source:                  aws.StringPtr("String"),
	}
	resp, err := svc.DescribeCacheParameters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeCacheSecurityGroups() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeCacheSecurityGroupsInput{
		CacheSecurityGroupName: aws.StringPtr("String"),
		Marker:                 aws.StringPtr("String"),
		MaxRecords:             aws.Int64Ptr(1),
	}
	resp, err := svc.DescribeCacheSecurityGroups(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeCacheSubnetGroups() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeCacheSubnetGroupsInput{
		CacheSubnetGroupName: aws.StringPtr("String"),
		Marker:               aws.StringPtr("String"),
		MaxRecords:           aws.Int64Ptr(1),
	}
	resp, err := svc.DescribeCacheSubnetGroups(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeEngineDefaultParameters() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeEngineDefaultParametersInput{
		CacheParameterGroupFamily: aws.StringPtr("String"), // Required
		Marker:     aws.StringPtr("String"),
		MaxRecords: aws.Int64Ptr(1),
	}
	resp, err := svc.DescribeEngineDefaultParameters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeEvents() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeEventsInput{
		Duration:         aws.Int64Ptr(1),
		EndTime:          aws.TimePtr(time.Now()),
		Marker:           aws.StringPtr("String"),
		MaxRecords:       aws.Int64Ptr(1),
		SourceIdentifier: aws.StringPtr("String"),
		SourceType:       aws.StringPtr("SourceType"),
		StartTime:        aws.TimePtr(time.Now()),
	}
	resp, err := svc.DescribeEvents(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeReplicationGroups() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeReplicationGroupsInput{
		Marker:             aws.StringPtr("String"),
		MaxRecords:         aws.Int64Ptr(1),
		ReplicationGroupID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeReplicationGroups(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeReservedCacheNodes() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeReservedCacheNodesInput{
		CacheNodeType:                aws.StringPtr("String"),
		Duration:                     aws.StringPtr("String"),
		Marker:                       aws.StringPtr("String"),
		MaxRecords:                   aws.Int64Ptr(1),
		OfferingType:                 aws.StringPtr("String"),
		ProductDescription:           aws.StringPtr("String"),
		ReservedCacheNodeID:          aws.StringPtr("String"),
		ReservedCacheNodesOfferingID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeReservedCacheNodes(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeReservedCacheNodesOfferings() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeReservedCacheNodesOfferingsInput{
		CacheNodeType:                aws.StringPtr("String"),
		Duration:                     aws.StringPtr("String"),
		Marker:                       aws.StringPtr("String"),
		MaxRecords:                   aws.Int64Ptr(1),
		OfferingType:                 aws.StringPtr("String"),
		ProductDescription:           aws.StringPtr("String"),
		ReservedCacheNodesOfferingID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeReservedCacheNodesOfferings(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_DescribeSnapshots() {
	svc := elasticache.New(nil)

	params := &elasticache.DescribeSnapshotsInput{
		CacheClusterID: aws.StringPtr("String"),
		Marker:         aws.StringPtr("String"),
		MaxRecords:     aws.Int64Ptr(1),
		SnapshotName:   aws.StringPtr("String"),
		SnapshotSource: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeSnapshots(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_ListTagsForResource() {
	svc := elasticache.New(nil)

	params := &elasticache.ListTagsForResourceInput{
		ResourceName: aws.StringPtr("String"), // Required
	}
	resp, err := svc.ListTagsForResource(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_ModifyCacheCluster() {
	svc := elasticache.New(nil)

	params := &elasticache.ModifyCacheClusterInput{
		CacheClusterID:          aws.StringPtr("String"), // Required
		AZMode:                  aws.StringPtr("AZMode"),
		ApplyImmediately:        aws.BoolPtr(true),
		AutoMinorVersionUpgrade: aws.BoolPtr(true),
		CacheNodeIDsToRemove: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		CacheParameterGroupName: aws.StringPtr("String"),
		CacheSecurityGroupNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		EngineVersion: aws.StringPtr("String"),
		NewAvailabilityZones: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		NotificationTopicARN:       aws.StringPtr("String"),
		NotificationTopicStatus:    aws.StringPtr("String"),
		NumCacheNodes:              aws.Int64Ptr(1),
		PreferredMaintenanceWindow: aws.StringPtr("String"),
		SecurityGroupIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SnapshotRetentionLimit: aws.Int64Ptr(1),
		SnapshotWindow:         aws.StringPtr("String"),
	}
	resp, err := svc.ModifyCacheCluster(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_ModifyCacheParameterGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.ModifyCacheParameterGroupInput{
		CacheParameterGroupName: aws.StringPtr("String"), // Required
		ParameterNameValues: []*elasticache.ParameterNameValue{ // Required
			{ // Required
				ParameterName:  aws.StringPtr("String"),
				ParameterValue: aws.StringPtr("String"),
			},
			// More values...
		},
	}
	resp, err := svc.ModifyCacheParameterGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_ModifyCacheSubnetGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.ModifyCacheSubnetGroupInput{
		CacheSubnetGroupName:        aws.StringPtr("String"), // Required
		CacheSubnetGroupDescription: aws.StringPtr("String"),
		SubnetIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.ModifyCacheSubnetGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_ModifyReplicationGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.ModifyReplicationGroupInput{
		ReplicationGroupID:       aws.StringPtr("String"), // Required
		ApplyImmediately:         aws.BoolPtr(true),
		AutoMinorVersionUpgrade:  aws.BoolPtr(true),
		AutomaticFailoverEnabled: aws.BoolPtr(true),
		CacheParameterGroupName:  aws.StringPtr("String"),
		CacheSecurityGroupNames: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		EngineVersion:               aws.StringPtr("String"),
		NotificationTopicARN:        aws.StringPtr("String"),
		NotificationTopicStatus:     aws.StringPtr("String"),
		PreferredMaintenanceWindow:  aws.StringPtr("String"),
		PrimaryClusterID:            aws.StringPtr("String"),
		ReplicationGroupDescription: aws.StringPtr("String"),
		SecurityGroupIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		SnapshotRetentionLimit: aws.Int64Ptr(1),
		SnapshotWindow:         aws.StringPtr("String"),
		SnapshottingClusterID:  aws.StringPtr("String"),
	}
	resp, err := svc.ModifyReplicationGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_PurchaseReservedCacheNodesOffering() {
	svc := elasticache.New(nil)

	params := &elasticache.PurchaseReservedCacheNodesOfferingInput{
		ReservedCacheNodesOfferingID: aws.StringPtr("String"), // Required
		CacheNodeCount:               aws.Int64Ptr(1),
		ReservedCacheNodeID:          aws.StringPtr("String"),
	}
	resp, err := svc.PurchaseReservedCacheNodesOffering(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_RebootCacheCluster() {
	svc := elasticache.New(nil)

	params := &elasticache.RebootCacheClusterInput{
		CacheClusterID: aws.StringPtr("String"), // Required
		CacheNodeIDsToReboot: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.RebootCacheCluster(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_RemoveTagsFromResource() {
	svc := elasticache.New(nil)

	params := &elasticache.RemoveTagsFromResourceInput{
		ResourceName: aws.StringPtr("String"), // Required
		TagKeys: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.RemoveTagsFromResource(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_ResetCacheParameterGroup() {
	svc := elasticache.New(nil)

	params := &elasticache.ResetCacheParameterGroupInput{
		CacheParameterGroupName: aws.StringPtr("String"), // Required
		ParameterNameValues: []*elasticache.ParameterNameValue{ // Required
			{ // Required
				ParameterName:  aws.StringPtr("String"),
				ParameterValue: aws.StringPtr("String"),
			},
			// More values...
		},
		ResetAllParameters: aws.BoolPtr(true),
	}
	resp, err := svc.ResetCacheParameterGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleElastiCache_RevokeCacheSecurityGroupIngress() {
	svc := elasticache.New(nil)

	params := &elasticache.RevokeCacheSecurityGroupIngressInput{
		CacheSecurityGroupName:  aws.StringPtr("String"), // Required
		EC2SecurityGroupName:    aws.StringPtr("String"), // Required
		EC2SecurityGroupOwnerID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.RevokeCacheSecurityGroupIngress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}
