// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package opsworks_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/service/opsworks"
)

var _ time.Duration
var _ bytes.Buffer

func ExampleOpsWorks_AssignInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.AssignInstanceInput{
		InstanceID: aws.StringPtr("String"), // Required
		LayerIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.AssignInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_AssignVolume() {
	svc := opsworks.New(nil)

	params := &opsworks.AssignVolumeInput{
		VolumeID:   aws.StringPtr("String"), // Required
		InstanceID: aws.StringPtr("String"),
	}
	resp, err := svc.AssignVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_AssociateElasticIP() {
	svc := opsworks.New(nil)

	params := &opsworks.AssociateElasticIPInput{
		ElasticIP:  aws.StringPtr("String"), // Required
		InstanceID: aws.StringPtr("String"),
	}
	resp, err := svc.AssociateElasticIP(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_AttachElasticLoadBalancer() {
	svc := opsworks.New(nil)

	params := &opsworks.AttachElasticLoadBalancerInput{
		ElasticLoadBalancerName: aws.StringPtr("String"), // Required
		LayerID:                 aws.StringPtr("String"), // Required
	}
	resp, err := svc.AttachElasticLoadBalancer(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_CloneStack() {
	svc := opsworks.New(nil)

	params := &opsworks.CloneStackInput{
		ServiceRoleARN: aws.StringPtr("String"), // Required
		SourceStackID:  aws.StringPtr("String"), // Required
		AgentVersion:   aws.StringPtr("String"),
		Attributes: map[string]*string{
			"Key": aws.StringPtr("String"), // Required
			// More values...
		},
		ChefConfiguration: &opsworks.ChefConfiguration{
			BerkshelfVersion: aws.StringPtr("String"),
			ManageBerkshelf:  aws.BoolPtr(true),
		},
		CloneAppIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		ClonePermissions: aws.BoolPtr(true),
		ConfigurationManager: &opsworks.StackConfigurationManager{
			Name:    aws.StringPtr("String"),
			Version: aws.StringPtr("String"),
		},
		CustomCookbooksSource: &opsworks.Source{
			Password: aws.StringPtr("String"),
			Revision: aws.StringPtr("String"),
			SSHKey:   aws.StringPtr("String"),
			Type:     aws.StringPtr("SourceType"),
			URL:      aws.StringPtr("String"),
			Username: aws.StringPtr("String"),
		},
		CustomJSON:                aws.StringPtr("String"),
		DefaultAvailabilityZone:   aws.StringPtr("String"),
		DefaultInstanceProfileARN: aws.StringPtr("String"),
		DefaultOs:                 aws.StringPtr("String"),
		DefaultRootDeviceType:     aws.StringPtr("RootDeviceType"),
		DefaultSSHKeyName:         aws.StringPtr("String"),
		DefaultSubnetID:           aws.StringPtr("String"),
		HostnameTheme:             aws.StringPtr("String"),
		Name:                      aws.StringPtr("String"),
		Region:                    aws.StringPtr("String"),
		UseCustomCookbooks:        aws.BoolPtr(true),
		UseOpsWorksSecurityGroups: aws.BoolPtr(true),
		VPCID: aws.StringPtr("String"),
	}
	resp, err := svc.CloneStack(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_CreateApp() {
	svc := opsworks.New(nil)

	params := &opsworks.CreateAppInput{
		Name:    aws.StringPtr("String"),  // Required
		StackID: aws.StringPtr("String"),  // Required
		Type:    aws.StringPtr("AppType"), // Required
		AppSource: &opsworks.Source{
			Password: aws.StringPtr("String"),
			Revision: aws.StringPtr("String"),
			SSHKey:   aws.StringPtr("String"),
			Type:     aws.StringPtr("SourceType"),
			URL:      aws.StringPtr("String"),
			Username: aws.StringPtr("String"),
		},
		Attributes: map[string]*string{
			"Key": aws.StringPtr("String"), // Required
			// More values...
		},
		DataSources: []*opsworks.DataSource{
			{ // Required
				ARN:          aws.StringPtr("String"),
				DatabaseName: aws.StringPtr("String"),
				Type:         aws.StringPtr("String"),
			},
			// More values...
		},
		Description: aws.StringPtr("String"),
		Domains: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		EnableSSL: aws.BoolPtr(true),
		Environment: []*opsworks.EnvironmentVariable{
			{ // Required
				Key:    aws.StringPtr("String"), // Required
				Value:  aws.StringPtr("String"), // Required
				Secure: aws.BoolPtr(true),
			},
			// More values...
		},
		SSLConfiguration: &opsworks.SSLConfiguration{
			Certificate: aws.StringPtr("String"), // Required
			PrivateKey:  aws.StringPtr("String"), // Required
			Chain:       aws.StringPtr("String"),
		},
		Shortname: aws.StringPtr("String"),
	}
	resp, err := svc.CreateApp(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_CreateDeployment() {
	svc := opsworks.New(nil)

	params := &opsworks.CreateDeploymentInput{
		Command: &opsworks.DeploymentCommand{ // Required
			Name: aws.StringPtr("DeploymentCommandName"), // Required
			Args: map[string][]*string{
				"Key": { // Required
					aws.StringPtr("String"), // Required
					// More values...
				},
				// More values...
			},
		},
		StackID:    aws.StringPtr("String"), // Required
		AppID:      aws.StringPtr("String"),
		Comment:    aws.StringPtr("String"),
		CustomJSON: aws.StringPtr("String"),
		InstanceIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.CreateDeployment(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_CreateInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.CreateInstanceInput{
		InstanceType: aws.StringPtr("String"), // Required
		LayerIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
		StackID:          aws.StringPtr("String"), // Required
		AMIID:            aws.StringPtr("String"),
		AgentVersion:     aws.StringPtr("String"),
		Architecture:     aws.StringPtr("Architecture"),
		AutoScalingType:  aws.StringPtr("AutoScalingType"),
		AvailabilityZone: aws.StringPtr("String"),
		BlockDeviceMappings: []*opsworks.BlockDeviceMapping{
			{ // Required
				DeviceName: aws.StringPtr("String"),
				EBS: &opsworks.EBSBlockDevice{
					DeleteOnTermination: aws.BoolPtr(true),
					IOPS:                aws.Int64Ptr(1),
					SnapshotID:          aws.StringPtr("String"),
					VolumeSize:          aws.Int64Ptr(1),
					VolumeType:          aws.StringPtr("VolumeType"),
				},
				NoDevice:    aws.StringPtr("String"),
				VirtualName: aws.StringPtr("String"),
			},
			// More values...
		},
		EBSOptimized:         aws.BoolPtr(true),
		Hostname:             aws.StringPtr("String"),
		InstallUpdatesOnBoot: aws.BoolPtr(true),
		Os:                   aws.StringPtr("String"),
		RootDeviceType:       aws.StringPtr("RootDeviceType"),
		SSHKeyName:           aws.StringPtr("String"),
		SubnetID:             aws.StringPtr("String"),
		VirtualizationType:   aws.StringPtr("String"),
	}
	resp, err := svc.CreateInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_CreateLayer() {
	svc := opsworks.New(nil)

	params := &opsworks.CreateLayerInput{
		Name:      aws.StringPtr("String"),    // Required
		Shortname: aws.StringPtr("String"),    // Required
		StackID:   aws.StringPtr("String"),    // Required
		Type:      aws.StringPtr("LayerType"), // Required
		Attributes: map[string]*string{
			"Key": aws.StringPtr("String"), // Required
			// More values...
		},
		AutoAssignElasticIPs:     aws.BoolPtr(true),
		AutoAssignPublicIPs:      aws.BoolPtr(true),
		CustomInstanceProfileARN: aws.StringPtr("String"),
		CustomRecipes: &opsworks.Recipes{
			Configure: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			Deploy: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			Setup: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			Shutdown: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			Undeploy: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
		},
		CustomSecurityGroupIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		EnableAutoHealing:    aws.BoolPtr(true),
		InstallUpdatesOnBoot: aws.BoolPtr(true),
		LifecycleEventConfiguration: &opsworks.LifecycleEventConfiguration{
			Shutdown: &opsworks.ShutdownEventConfiguration{
				DelayUntilELBConnectionsDrained: aws.BoolPtr(true),
				ExecutionTimeout:                aws.Int64Ptr(1),
			},
		},
		Packages: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		UseEBSOptimizedInstances: aws.BoolPtr(true),
		VolumeConfigurations: []*opsworks.VolumeConfiguration{
			{ // Required
				MountPoint:    aws.StringPtr("String"), // Required
				NumberOfDisks: aws.Int64Ptr(1),         // Required
				Size:          aws.Int64Ptr(1),         // Required
				IOPS:          aws.Int64Ptr(1),
				RAIDLevel:     aws.Int64Ptr(1),
				VolumeType:    aws.StringPtr("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateLayer(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_CreateStack() {
	svc := opsworks.New(nil)

	params := &opsworks.CreateStackInput{
		DefaultInstanceProfileARN: aws.StringPtr("String"), // Required
		Name:           aws.StringPtr("String"), // Required
		Region:         aws.StringPtr("String"), // Required
		ServiceRoleARN: aws.StringPtr("String"), // Required
		AgentVersion:   aws.StringPtr("String"),
		Attributes: map[string]*string{
			"Key": aws.StringPtr("String"), // Required
			// More values...
		},
		ChefConfiguration: &opsworks.ChefConfiguration{
			BerkshelfVersion: aws.StringPtr("String"),
			ManageBerkshelf:  aws.BoolPtr(true),
		},
		ConfigurationManager: &opsworks.StackConfigurationManager{
			Name:    aws.StringPtr("String"),
			Version: aws.StringPtr("String"),
		},
		CustomCookbooksSource: &opsworks.Source{
			Password: aws.StringPtr("String"),
			Revision: aws.StringPtr("String"),
			SSHKey:   aws.StringPtr("String"),
			Type:     aws.StringPtr("SourceType"),
			URL:      aws.StringPtr("String"),
			Username: aws.StringPtr("String"),
		},
		CustomJSON:                aws.StringPtr("String"),
		DefaultAvailabilityZone:   aws.StringPtr("String"),
		DefaultOs:                 aws.StringPtr("String"),
		DefaultRootDeviceType:     aws.StringPtr("RootDeviceType"),
		DefaultSSHKeyName:         aws.StringPtr("String"),
		DefaultSubnetID:           aws.StringPtr("String"),
		HostnameTheme:             aws.StringPtr("String"),
		UseCustomCookbooks:        aws.BoolPtr(true),
		UseOpsWorksSecurityGroups: aws.BoolPtr(true),
		VPCID: aws.StringPtr("String"),
	}
	resp, err := svc.CreateStack(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_CreateUserProfile() {
	svc := opsworks.New(nil)

	params := &opsworks.CreateUserProfileInput{
		IAMUserARN:          aws.StringPtr("String"), // Required
		AllowSelfManagement: aws.BoolPtr(true),
		SSHPublicKey:        aws.StringPtr("String"),
		SSHUsername:         aws.StringPtr("String"),
	}
	resp, err := svc.CreateUserProfile(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DeleteApp() {
	svc := opsworks.New(nil)

	params := &opsworks.DeleteAppInput{
		AppID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeleteApp(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DeleteInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.DeleteInstanceInput{
		InstanceID:      aws.StringPtr("String"), // Required
		DeleteElasticIP: aws.BoolPtr(true),
		DeleteVolumes:   aws.BoolPtr(true),
	}
	resp, err := svc.DeleteInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DeleteLayer() {
	svc := opsworks.New(nil)

	params := &opsworks.DeleteLayerInput{
		LayerID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeleteLayer(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DeleteStack() {
	svc := opsworks.New(nil)

	params := &opsworks.DeleteStackInput{
		StackID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeleteStack(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DeleteUserProfile() {
	svc := opsworks.New(nil)

	params := &opsworks.DeleteUserProfileInput{
		IAMUserARN: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeleteUserProfile(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DeregisterElasticIP() {
	svc := opsworks.New(nil)

	params := &opsworks.DeregisterElasticIPInput{
		ElasticIP: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeregisterElasticIP(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DeregisterInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.DeregisterInstanceInput{
		InstanceID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeregisterInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DeregisterRDSDBInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.DeregisterRDSDBInstanceInput{
		RDSDBInstanceARN: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeregisterRDSDBInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DeregisterVolume() {
	svc := opsworks.New(nil)

	params := &opsworks.DeregisterVolumeInput{
		VolumeID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DeregisterVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeAgentVersions() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeAgentVersionsInput{
		ConfigurationManager: &opsworks.StackConfigurationManager{
			Name:    aws.StringPtr("String"),
			Version: aws.StringPtr("String"),
		},
		StackID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeAgentVersions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeApps() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeAppsInput{
		AppIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		StackID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeApps(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeCommands() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeCommandsInput{
		CommandIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		DeploymentID: aws.StringPtr("String"),
		InstanceID:   aws.StringPtr("String"),
	}
	resp, err := svc.DescribeCommands(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeDeployments() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeDeploymentsInput{
		AppID: aws.StringPtr("String"),
		DeploymentIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		StackID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeDeployments(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeElasticIPs() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeElasticIPsInput{
		IPs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		InstanceID: aws.StringPtr("String"),
		StackID:    aws.StringPtr("String"),
	}
	resp, err := svc.DescribeElasticIPs(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeElasticLoadBalancers() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeElasticLoadBalancersInput{
		LayerIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		StackID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeElasticLoadBalancers(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeInstances() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeInstancesInput{
		InstanceIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		LayerID: aws.StringPtr("String"),
		StackID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeLayers() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeLayersInput{
		LayerIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		StackID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeLayers(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeLoadBasedAutoScaling() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeLoadBasedAutoScalingInput{
		LayerIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeLoadBasedAutoScaling(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeMyUserProfile() {
	svc := opsworks.New(nil)

	var params *opsworks.DescribeMyUserProfileInput
	resp, err := svc.DescribeMyUserProfile(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribePermissions() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribePermissionsInput{
		IAMUserARN: aws.StringPtr("String"),
		StackID:    aws.StringPtr("String"),
	}
	resp, err := svc.DescribePermissions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeRAIDArrays() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeRAIDArraysInput{
		InstanceID: aws.StringPtr("String"),
		RAIDArrayIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		StackID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeRAIDArrays(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeRDSDBInstances() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeRDSDBInstancesInput{
		StackID: aws.StringPtr("String"), // Required
		RDSDBInstanceARNs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeRDSDBInstances(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeServiceErrors() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeServiceErrorsInput{
		InstanceID: aws.StringPtr("String"),
		ServiceErrorIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		StackID: aws.StringPtr("String"),
	}
	resp, err := svc.DescribeServiceErrors(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeStackProvisioningParameters() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeStackProvisioningParametersInput{
		StackID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DescribeStackProvisioningParameters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeStackSummary() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeStackSummaryInput{
		StackID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DescribeStackSummary(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeStacks() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeStacksInput{
		StackIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeStacks(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeTimeBasedAutoScaling() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeTimeBasedAutoScalingInput{
		InstanceIDs: []*string{ // Required
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeTimeBasedAutoScaling(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeUserProfiles() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeUserProfilesInput{
		IAMUserARNs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeUserProfiles(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DescribeVolumes() {
	svc := opsworks.New(nil)

	params := &opsworks.DescribeVolumesInput{
		InstanceID:  aws.StringPtr("String"),
		RAIDArrayID: aws.StringPtr("String"),
		StackID:     aws.StringPtr("String"),
		VolumeIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeVolumes(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DetachElasticLoadBalancer() {
	svc := opsworks.New(nil)

	params := &opsworks.DetachElasticLoadBalancerInput{
		ElasticLoadBalancerName: aws.StringPtr("String"), // Required
		LayerID:                 aws.StringPtr("String"), // Required
	}
	resp, err := svc.DetachElasticLoadBalancer(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_DisassociateElasticIP() {
	svc := opsworks.New(nil)

	params := &opsworks.DisassociateElasticIPInput{
		ElasticIP: aws.StringPtr("String"), // Required
	}
	resp, err := svc.DisassociateElasticIP(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_GetHostnameSuggestion() {
	svc := opsworks.New(nil)

	params := &opsworks.GetHostnameSuggestionInput{
		LayerID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.GetHostnameSuggestion(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_GrantAccess() {
	svc := opsworks.New(nil)

	params := &opsworks.GrantAccessInput{
		InstanceID:        aws.StringPtr("String"), // Required
		ValidForInMinutes: aws.Int64Ptr(1),
	}
	resp, err := svc.GrantAccess(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_RebootInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.RebootInstanceInput{
		InstanceID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.RebootInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_RegisterElasticIP() {
	svc := opsworks.New(nil)

	params := &opsworks.RegisterElasticIPInput{
		ElasticIP: aws.StringPtr("String"), // Required
		StackID:   aws.StringPtr("String"), // Required
	}
	resp, err := svc.RegisterElasticIP(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_RegisterInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.RegisterInstanceInput{
		StackID:  aws.StringPtr("String"), // Required
		Hostname: aws.StringPtr("String"),
		InstanceIdentity: &opsworks.InstanceIdentity{
			Document:  aws.StringPtr("String"),
			Signature: aws.StringPtr("String"),
		},
		PrivateIP:               aws.StringPtr("String"),
		PublicIP:                aws.StringPtr("String"),
		RSAPublicKey:            aws.StringPtr("String"),
		RSAPublicKeyFingerprint: aws.StringPtr("String"),
	}
	resp, err := svc.RegisterInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_RegisterRDSDBInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.RegisterRDSDBInstanceInput{
		DBPassword:       aws.StringPtr("String"), // Required
		DBUser:           aws.StringPtr("String"), // Required
		RDSDBInstanceARN: aws.StringPtr("String"), // Required
		StackID:          aws.StringPtr("String"), // Required
	}
	resp, err := svc.RegisterRDSDBInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_RegisterVolume() {
	svc := opsworks.New(nil)

	params := &opsworks.RegisterVolumeInput{
		StackID:     aws.StringPtr("String"), // Required
		EC2VolumeID: aws.StringPtr("String"),
	}
	resp, err := svc.RegisterVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_SetLoadBasedAutoScaling() {
	svc := opsworks.New(nil)

	params := &opsworks.SetLoadBasedAutoScalingInput{
		LayerID: aws.StringPtr("String"), // Required
		DownScaling: &opsworks.AutoScalingThresholds{
			Alarms: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			CPUThreshold:       aws.Float64Ptr(1.0),
			IgnoreMetricsTime:  aws.Int64Ptr(1),
			InstanceCount:      aws.Int64Ptr(1),
			LoadThreshold:      aws.Float64Ptr(1.0),
			MemoryThreshold:    aws.Float64Ptr(1.0),
			ThresholdsWaitTime: aws.Int64Ptr(1),
		},
		Enable: aws.BoolPtr(true),
		UpScaling: &opsworks.AutoScalingThresholds{
			Alarms: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			CPUThreshold:       aws.Float64Ptr(1.0),
			IgnoreMetricsTime:  aws.Int64Ptr(1),
			InstanceCount:      aws.Int64Ptr(1),
			LoadThreshold:      aws.Float64Ptr(1.0),
			MemoryThreshold:    aws.Float64Ptr(1.0),
			ThresholdsWaitTime: aws.Int64Ptr(1),
		},
	}
	resp, err := svc.SetLoadBasedAutoScaling(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_SetPermission() {
	svc := opsworks.New(nil)

	params := &opsworks.SetPermissionInput{
		IAMUserARN: aws.StringPtr("String"), // Required
		StackID:    aws.StringPtr("String"), // Required
		AllowSSH:   aws.BoolPtr(true),
		AllowSudo:  aws.BoolPtr(true),
		Level:      aws.StringPtr("String"),
	}
	resp, err := svc.SetPermission(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_SetTimeBasedAutoScaling() {
	svc := opsworks.New(nil)

	params := &opsworks.SetTimeBasedAutoScalingInput{
		InstanceID: aws.StringPtr("String"), // Required
		AutoScalingSchedule: &opsworks.WeeklyAutoScalingSchedule{
			Friday: map[string]*string{
				"Key": aws.StringPtr("Switch"), // Required
				// More values...
			},
			Monday: map[string]*string{
				"Key": aws.StringPtr("Switch"), // Required
				// More values...
			},
			Saturday: map[string]*string{
				"Key": aws.StringPtr("Switch"), // Required
				// More values...
			},
			Sunday: map[string]*string{
				"Key": aws.StringPtr("Switch"), // Required
				// More values...
			},
			Thursday: map[string]*string{
				"Key": aws.StringPtr("Switch"), // Required
				// More values...
			},
			Tuesday: map[string]*string{
				"Key": aws.StringPtr("Switch"), // Required
				// More values...
			},
			Wednesday: map[string]*string{
				"Key": aws.StringPtr("Switch"), // Required
				// More values...
			},
		},
	}
	resp, err := svc.SetTimeBasedAutoScaling(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_StartInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.StartInstanceInput{
		InstanceID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.StartInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_StartStack() {
	svc := opsworks.New(nil)

	params := &opsworks.StartStackInput{
		StackID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.StartStack(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_StopInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.StopInstanceInput{
		InstanceID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.StopInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_StopStack() {
	svc := opsworks.New(nil)

	params := &opsworks.StopStackInput{
		StackID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.StopStack(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UnassignInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.UnassignInstanceInput{
		InstanceID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.UnassignInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UnassignVolume() {
	svc := opsworks.New(nil)

	params := &opsworks.UnassignVolumeInput{
		VolumeID: aws.StringPtr("String"), // Required
	}
	resp, err := svc.UnassignVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UpdateApp() {
	svc := opsworks.New(nil)

	params := &opsworks.UpdateAppInput{
		AppID: aws.StringPtr("String"), // Required
		AppSource: &opsworks.Source{
			Password: aws.StringPtr("String"),
			Revision: aws.StringPtr("String"),
			SSHKey:   aws.StringPtr("String"),
			Type:     aws.StringPtr("SourceType"),
			URL:      aws.StringPtr("String"),
			Username: aws.StringPtr("String"),
		},
		Attributes: map[string]*string{
			"Key": aws.StringPtr("String"), // Required
			// More values...
		},
		DataSources: []*opsworks.DataSource{
			{ // Required
				ARN:          aws.StringPtr("String"),
				DatabaseName: aws.StringPtr("String"),
				Type:         aws.StringPtr("String"),
			},
			// More values...
		},
		Description: aws.StringPtr("String"),
		Domains: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		EnableSSL: aws.BoolPtr(true),
		Environment: []*opsworks.EnvironmentVariable{
			{ // Required
				Key:    aws.StringPtr("String"), // Required
				Value:  aws.StringPtr("String"), // Required
				Secure: aws.BoolPtr(true),
			},
			// More values...
		},
		Name: aws.StringPtr("String"),
		SSLConfiguration: &opsworks.SSLConfiguration{
			Certificate: aws.StringPtr("String"), // Required
			PrivateKey:  aws.StringPtr("String"), // Required
			Chain:       aws.StringPtr("String"),
		},
		Type: aws.StringPtr("AppType"),
	}
	resp, err := svc.UpdateApp(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UpdateElasticIP() {
	svc := opsworks.New(nil)

	params := &opsworks.UpdateElasticIPInput{
		ElasticIP: aws.StringPtr("String"), // Required
		Name:      aws.StringPtr("String"),
	}
	resp, err := svc.UpdateElasticIP(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UpdateInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.UpdateInstanceInput{
		InstanceID:           aws.StringPtr("String"), // Required
		AMIID:                aws.StringPtr("String"),
		AgentVersion:         aws.StringPtr("String"),
		Architecture:         aws.StringPtr("Architecture"),
		AutoScalingType:      aws.StringPtr("AutoScalingType"),
		EBSOptimized:         aws.BoolPtr(true),
		Hostname:             aws.StringPtr("String"),
		InstallUpdatesOnBoot: aws.BoolPtr(true),
		InstanceType:         aws.StringPtr("String"),
		LayerIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		Os:         aws.StringPtr("String"),
		SSHKeyName: aws.StringPtr("String"),
	}
	resp, err := svc.UpdateInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UpdateLayer() {
	svc := opsworks.New(nil)

	params := &opsworks.UpdateLayerInput{
		LayerID: aws.StringPtr("String"), // Required
		Attributes: map[string]*string{
			"Key": aws.StringPtr("String"), // Required
			// More values...
		},
		AutoAssignElasticIPs:     aws.BoolPtr(true),
		AutoAssignPublicIPs:      aws.BoolPtr(true),
		CustomInstanceProfileARN: aws.StringPtr("String"),
		CustomRecipes: &opsworks.Recipes{
			Configure: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			Deploy: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			Setup: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			Shutdown: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
			Undeploy: []*string{
				aws.StringPtr("String"), // Required
				// More values...
			},
		},
		CustomSecurityGroupIDs: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		EnableAutoHealing:    aws.BoolPtr(true),
		InstallUpdatesOnBoot: aws.BoolPtr(true),
		LifecycleEventConfiguration: &opsworks.LifecycleEventConfiguration{
			Shutdown: &opsworks.ShutdownEventConfiguration{
				DelayUntilELBConnectionsDrained: aws.BoolPtr(true),
				ExecutionTimeout:                aws.Int64Ptr(1),
			},
		},
		Name: aws.StringPtr("String"),
		Packages: []*string{
			aws.StringPtr("String"), // Required
			// More values...
		},
		Shortname:                aws.StringPtr("String"),
		UseEBSOptimizedInstances: aws.BoolPtr(true),
		VolumeConfigurations: []*opsworks.VolumeConfiguration{
			{ // Required
				MountPoint:    aws.StringPtr("String"), // Required
				NumberOfDisks: aws.Int64Ptr(1),         // Required
				Size:          aws.Int64Ptr(1),         // Required
				IOPS:          aws.Int64Ptr(1),
				RAIDLevel:     aws.Int64Ptr(1),
				VolumeType:    aws.StringPtr("String"),
			},
			// More values...
		},
	}
	resp, err := svc.UpdateLayer(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UpdateMyUserProfile() {
	svc := opsworks.New(nil)

	params := &opsworks.UpdateMyUserProfileInput{
		SSHPublicKey: aws.StringPtr("String"),
	}
	resp, err := svc.UpdateMyUserProfile(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UpdateRDSDBInstance() {
	svc := opsworks.New(nil)

	params := &opsworks.UpdateRDSDBInstanceInput{
		RDSDBInstanceARN: aws.StringPtr("String"), // Required
		DBPassword:       aws.StringPtr("String"),
		DBUser:           aws.StringPtr("String"),
	}
	resp, err := svc.UpdateRDSDBInstance(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UpdateStack() {
	svc := opsworks.New(nil)

	params := &opsworks.UpdateStackInput{
		StackID:      aws.StringPtr("String"), // Required
		AgentVersion: aws.StringPtr("String"),
		Attributes: map[string]*string{
			"Key": aws.StringPtr("String"), // Required
			// More values...
		},
		ChefConfiguration: &opsworks.ChefConfiguration{
			BerkshelfVersion: aws.StringPtr("String"),
			ManageBerkshelf:  aws.BoolPtr(true),
		},
		ConfigurationManager: &opsworks.StackConfigurationManager{
			Name:    aws.StringPtr("String"),
			Version: aws.StringPtr("String"),
		},
		CustomCookbooksSource: &opsworks.Source{
			Password: aws.StringPtr("String"),
			Revision: aws.StringPtr("String"),
			SSHKey:   aws.StringPtr("String"),
			Type:     aws.StringPtr("SourceType"),
			URL:      aws.StringPtr("String"),
			Username: aws.StringPtr("String"),
		},
		CustomJSON:                aws.StringPtr("String"),
		DefaultAvailabilityZone:   aws.StringPtr("String"),
		DefaultInstanceProfileARN: aws.StringPtr("String"),
		DefaultOs:                 aws.StringPtr("String"),
		DefaultRootDeviceType:     aws.StringPtr("RootDeviceType"),
		DefaultSSHKeyName:         aws.StringPtr("String"),
		DefaultSubnetID:           aws.StringPtr("String"),
		HostnameTheme:             aws.StringPtr("String"),
		Name:                      aws.StringPtr("String"),
		ServiceRoleARN:            aws.StringPtr("String"),
		UseCustomCookbooks:        aws.BoolPtr(true),
		UseOpsWorksSecurityGroups: aws.BoolPtr(true),
	}
	resp, err := svc.UpdateStack(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UpdateUserProfile() {
	svc := opsworks.New(nil)

	params := &opsworks.UpdateUserProfileInput{
		IAMUserARN:          aws.StringPtr("String"), // Required
		AllowSelfManagement: aws.BoolPtr(true),
		SSHPublicKey:        aws.StringPtr("String"),
		SSHUsername:         aws.StringPtr("String"),
	}
	resp, err := svc.UpdateUserProfile(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}

func ExampleOpsWorks_UpdateVolume() {
	svc := opsworks.New(nil)

	params := &opsworks.UpdateVolumeInput{
		VolumeID:   aws.StringPtr("String"), // Required
		MountPoint: aws.StringPtr("String"),
		Name:       aws.StringPtr("String"),
	}
	resp, err := svc.UpdateVolume(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS Error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.StringValue(resp))
}
